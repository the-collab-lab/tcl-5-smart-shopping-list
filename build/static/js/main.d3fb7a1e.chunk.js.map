{"version":3,"sources":["lib/firebase.js","pages/FirebaseTest.js","components/FooterTabs.js","lib/estimates.js","lib/timeframeConstants.js","components/ShoppingListItem.js","lib/normalizeString.js","pages/ShoppingList.js","components/AddItemForm.js","pages/AddItem.js","lib/tokenGenerator.js","components/NewListButton.js","pages/Home.js","pages/JoinList.js","components/HeaderLogo.js","App.js","serviceWorker.js","index.js"],"names":["fb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseTesting","_useState","useState","_useState2","_slicedToArray","clickLog","setClickLog","db","firestore","clicksRef","collection","useEffect","orderBy","limit","get","then","querySnapshot","clicksArray","forEach","doc","documentData","data","push","catch","error","console","log","React","createElement","Link","onClick","event","preventDefault","currentTime","Timestamp","fromDate","Date","add","action","dateTime","href","map","id","key","toDate","toString","FooterTabs","className","to","Button","node","waves","calculateEstimate","lastEstimate","latestInterval","numberOfPurchases","isNaN","previousFactor","latestFactor","totalDivisor","Math","round","SOON","KIND_OF_SOON","NOT_SOON","INACTIVE","returnStringDict","returnClassStringDict","returnString","type","number","output","ShoppingListItem","_ref","item","handleCheck","currentItem","setCurrentItem","setDeleteModal","setDetailModal","deleteItem","ariaString","detailModal","concat","itemName","timeFrame","Fragment","Checkbox","e","aria-label","name","value","isChecked","checked","style","cursor","src","alt","Modal","header","actions","flat","modal","lastPurchaseDate","moment","format","nextPurchaseDate","numOfPurchases","normalizeString","inputString","toLowerCase","replace","trim","ShoppingList","token","shoppingListItems","setShoppingListItems","_useState3","_useState4","filterString","setFilterString","_useState5","_useState6","deleteModal","_useState7","_useState8","_useState9","lastPurchase","_useState10","userToken","history","useHistory","getShoppingList","allData","_objectSpread","lessThan24Hours","flaggedData","shoppingListArray","now","initialDate","diff","flagInactive","alphabeticalSort","a","b","aName","bName","seven","filter","sort","fourteen","thirty","inactive","filterShoppingListByTimeframe","date","formattedDate","parseInt","newDate","today","target","update","delete","filteredList","includes","cancelItem","length","placeholder","onChange","searchLength","htmlFor","Form","setItemName","setTimeFrame","setLastPurchaseDate","shoppingListCollection","setShoppingListCollection","duplicateError","setDuplicateError","_useState11","_useState12","addStatus","setAddStatus","getCurrentShoppingListItems","currentToken","empty","fullCollection","nameData","Redirect","onSubmit","tokenRef","normalizeItemName","docRef","alert","window","location","reload","handleSubmit","required","Select","multiple","disabled","Icon","right","AddItem","props","words","getRandomInt","min","max","crypto","msCrypto","count","result","cryptoObj","rand","Uint32Array","skip","getRandomValues","secureRandom","floor","random","getToken","phrase","i","join","NewListButton","newToken","ls","setToken","Home","JoinList","handleChange","checkToken","inputToken","Header","App","setInputToken","M","AutoInit","Switch","Route","exact","path","Boolean","hostname","match","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3fb7a1e.chunk.js","sourcesContent":["// NOTE: import only the Firebase modules that you need in your app... except\n// for the second line, which makes both the linter and react-firebase happy\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n// Initalize Firebase.\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBxHLGe34d6GGIPm7b3reXlMY1rzjixbJs\",\n  authDomain: \"tcl-5-smart-shopping-list.firebaseapp.com\",\n  databaseURL: \"https://tcl-5-smart-shopping-list.firebaseio.com\",\n  projectId: \"tcl-5-smart-shopping-list\",\n  storageBucket: \"tcl-5-smart-shopping-list.appspot.com\",\n  messagingSenderId: \"420324673505\",\n  appId: \"1:420324673505:web:048c207208a494435074a0\"\n};\n\nlet fb = firebase.initializeApp(firebaseConfig);\n\nexport default fb;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport fb from '../lib/firebase';\nimport firebase from 'firebase/app';\n\nconst FirebaseTesting = () => {\n    const [clickLog, setClickLog] = useState([]);\n    const db = fb.firestore();\n    const clicksRef = db.collection('clicks');\n\n    const onClick = event => {\n        event.preventDefault();\n        const currentTime = firebase.firestore.Timestamp.fromDate(new Date());\n\n        db.collection('clicks')\n            .add({\n                action: 'click',\n                dateTime: currentTime,\n            })\n            .then(() => console.log(currentTime + ' successfully written!'))\n            .catch(error => console.error('Error writing document: ', error));\n    };\n\n    useEffect(() => {\n        clicksRef\n            .orderBy('dateTime', 'desc')\n            .limit(5)\n            .get()\n            .then(querySnapshot => {\n                let clicksArray = [];\n                querySnapshot.forEach(doc => {\n                    let documentData = doc.data();\n                    clicksArray.push(documentData);\n                });\n                setClickLog(clicksArray);\n            })\n            .catch(error => {\n                console.log('Error getting document:', error);\n            });\n    }, [clicksRef]);\n\n    return (\n        <div>\n            <Link onClick={onClick} href=\"/FirebaseTesting\">\n                Click me!\n            </Link>\n            {clickLog ? (\n                clickLog.map((log, id) => (\n                    <h2 key={id}>\n                        {' '}\n                        The button was clicked at{' '}\n                        {log.dateTime.toDate().toString()}{' '}\n                    </h2>\n                ))\n            ) : (\n                <h2>No Clicks</h2>\n            )}\n        </div>\n    );\n};\n\nexport default FirebaseTesting;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {Button} from 'react-materialize'\n\nconst FooterTabs= () => {\n\treturn (\n\t\t\t<div className='page-footer white'>\n\t\t\t\t<div className='container center'>\n\t\t\t\t\t\t<Link to='/ShoppingList'>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tnode=\"button\"\n\t\t\t\t\t\t\t\twaves=\"light\"\n\t\t\t\t\t\t\t\tclassName='navbutton btn-large'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tShopping List\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to='/AddItem'>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tnode=\"button\"\n\t\t\t\t\t\t\t\twaves=\"light\"\n\t\t\t\t\t\t\t\tclassName='navbutton btn-large'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd Item\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n}\n \nexport default FooterTabs;","/**\n * Calculate a weighted estimate for the interval until the next purchase\n * Current purchase a tiny bit less weight than all previous purchases\n * @param {Number} lastEstimate The last stored purchase interval estimate // TimeFrame\n * @param {Number} latestInterval The interval between the most recent and previous purchases\n * @param {Number} numberOfPurchases Total number of purchases for the item\n */\n\nconst calculateEstimate = (lastEstimate, latestInterval, numberOfPurchases) => {\n    if (numberOfPurchases > 1) {\n        if (isNaN(lastEstimate)) {\n                lastEstimate = 14;\n        }\n        let previousFactor = lastEstimate * numberOfPurchases;\n        let latestFactor = latestInterval * (numberOfPurchases - 1);\n        let totalDivisor = numberOfPurchases * 2 - 1;\n        return Math.round((previousFactor + latestFactor) / totalDivisor);\n    } else {\n        return latestInterval;\n    }\n};\n\nexport default calculateEstimate;","const SOON = {stringValue: \"fewer that 7 days\", integerValue: 7, stringClass:\"soon\"}\nconst KIND_OF_SOON = {stringValue: \"between 7 and 30 days\", integerValue: 14, stringClass:\"kindasoon\"}\nconst NOT_SOON = {stringValue: \"more than 30 days\", integerValue: 30, stringClass:\"notsoon\"}\nconst INACTIVE = {stringValue: \"inactive\", integerValue: 0, stringClass:\"inactive\"}\n\nconst returnStringDict = {};\nreturnStringDict[SOON.integerValue] = SOON.stringValue;\nreturnStringDict[KIND_OF_SOON.integerValue] = KIND_OF_SOON.stringValue;\nreturnStringDict[NOT_SOON.integerValue] =  NOT_SOON.stringValue;\nreturnStringDict[INACTIVE.integerValue] = INACTIVE.stringValue;\n\nconst returnClassStringDict = {};\nreturnClassStringDict[SOON.integerValue] = SOON.stringClass;\nreturnClassStringDict[KIND_OF_SOON.integerValue] = KIND_OF_SOON.stringClass;\nreturnClassStringDict[NOT_SOON.integerValue] =  NOT_SOON.stringClass;\nreturnClassStringDict[INACTIVE.integerValue] = INACTIVE.stringClass;\n\nconst returnString = (type, number) => {\n    let output;\n    if(type === \"value\"){\n        output=returnStringDict[number];\n    }\n    if(type === \"class\"){\n        output=returnClassStringDict[number];\n    }\n    return output;\n}\n\n\nexport {SOON, KIND_OF_SOON, NOT_SOON, INACTIVE, returnString};\n","import React from 'react';\r\nimport {returnString} from '../lib/timeframeConstants';\r\nimport {Modal, Button, Checkbox} from 'react-materialize'\r\nimport moment from 'moment';\r\n\r\nconst ShoppingListItem = ({item, handleCheck, currentItem, setCurrentItem, setDeleteModal, setDetailModal, deleteItem, detailModal}) => {\r\n    const ariaString = `${item.itemName} to be bought in ${returnString(\"value\",item.timeFrame)}`;\r\n    return (\r\n        <React.Fragment>\r\n        <tr className={returnString(\"class\",item.timeFrame)}>\r\n            <td>\r\n            <Checkbox\r\n                onClick={e => handleCheck(e, item)}\r\n                aria-label= {ariaString}\r\n                key={item.id}\r\n                id={item.id}\r\n                name={item.id}\r\n                value={item.isChecked}\r\n                checked={item.isChecked}\r\n            />\r\n            </td>\r\n            <td onClick= {()=> {setCurrentItem(item); setDetailModal(true);setDeleteModal(false)}}  currentItem={item} style={{cursor: \"pointer\"}} className=\"modal-trigger\" href=\"#modal2\">{item.itemName} &#x24D8;</td>\r\n            <td>{returnString(\"value\",item.timeFrame)}</td>\r\n            <td>\r\n            <button\r\n                className=\"deleteItemButton modal-trigger\"\r\n                href=\"#modal1\"\r\n                node=\"button\"\r\n                onClick={() => {\r\n                    setCurrentItem(item);\r\n                    setDeleteModal(true);\r\n                    setDetailModal(false)\r\n                }}\r\n            >\r\n            <img src=\"/img/005-trash.png\" alt=\"delete icon\" />\r\n            </button></td>\r\n        </tr>\r\n\r\n            <Modal header=\"Here are the details of your item:\" id=\"modal2\"\r\n            actions={[\r\n                <div>\r\n                <Button flat modal=\"close\" node=\"button\" waves=\"green\">Close</Button>\r\n                </div>\r\n                ]}>\r\n                <div className=\"detailsModal\">\r\n\r\n                <h2>{currentItem.itemName}</h2>\r\n                <ul>\r\n                    <li>\r\n                        Last purchase:{' '}\r\n                        <p>\r\n                            {' '}\r\n                            {currentItem.lastPurchaseDate\r\n                                ? moment(currentItem.lastPurchaseDate).format('LL')\r\n                                : 'None'}\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        Next purchase:{' '}\r\n                        {\r\n                            <p>\r\n                                {currentItem.nextPurchaseDate\r\n                                    ?  moment(currentItem.nextPurchaseDate).format(\"LL\")\r\n                                    : 'None'}\r\n                            </p>\r\n                        }\r\n                    </li>\r\n                    <li>\r\n                        Number of purchases:\r\n                        <p id=\"itemDetails\">{currentItem.numOfPurchases}</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            </Modal>\r\n            <Modal header=\"Want to delete your item?\" id=\"modal1\"\r\n                actions={[\r\n                <div>\r\n                <Button flat modal=\"close\" node=\"button\" waves=\"green\" onClick={() => deleteItem(currentItem)}>Yes</Button>\r\n                <Button flat modal=\"close\" node=\"button\" waves=\"green\">No</Button>\r\n                </div>\r\n                ]}>\r\n                    By removing the item from your list, you will no longer need to worry about buying it :)\r\n            </Modal>\r\n            </React.Fragment>\r\n    );\r\n    }\r\n\r\n    export default ShoppingListItem;","const normalizeString = (inputString) => {\n    const output = inputString\n    .toLowerCase()\n    .replace(/[.,#!$%&;:{}=\\-_`~()]/g, '')\n    .trim()\n    .replace(/\\s{2,}/g, ' ');\n    return output\n}\nexport default normalizeString;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fb from '../lib/firebase';\nimport moment from 'moment';\nimport calculateEstimate from '../lib/estimates';\nimport ShoppingListItem from '../components/ShoppingListItem';\nimport normalizeString from '../lib/normalizeString';\nimport { Modal } from 'react-materialize';\n\nconst ShoppingList = ({ token }) => {\n    const [shoppingListItems, setShoppingListItems] = useState([]);\n    const [filterString, setFilterString] = useState('');\n    const [deleteModal, setDeleteModal] = useState(false);\n    const [detailModal, setDetailModal] = useState(false);\n    const [currentItem, setCurrentItem] = useState({\n        itemName: ' ',\n        nextPurchaseDate: moment(),\n        lastPurchase: moment(),\n        numOfPurchases: 0,\n    });\n    const userToken = token;\n    let history = useHistory();\n\n    const welcomeInstructions = () => {\n        return (\n            <div className=\"welcomeContainer\">\n                <input\n                    type=\"checkbox\"\n                    className=\"button-link\"\n                    id=\"WelcomeClick\"\n                />\n                <img src=\"/img/purchase.png\" alt=\"Empty Shopping List Basket\" />\n                <br />\n                <label\n                    htmlFor=\"WelcomeClick\"\n                    id=\"Welcome\"\n                    className=\"welcomeLabel\"\n                >\n                    Your list looks empty. Need help?\n                </label>\n                <div id=\"hideWelcome\">\n                    <ul>\n                        <li>1) Add a new item to remember to buy it.</li>\n                        <li>\n                            2) View all your items in the shopping list tab.\n                        </li>\n                        <li>Happy Shopping!</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    };\n\n    const filterShoppingListByTimeframe = shoppingListArray => {\n        const alphabeticalSort = (a, b) => {\n            const aName = normalizeString(a.itemName);\n            const bName = normalizeString(b.itemName);\n            if (aName < bName) {\n                return -1;\n            }\n            if (aName > bName) {\n                return 1;\n            }\n            return 0;\n        };\n        const seven = shoppingListArray\n            .filter(item => item.timeFrame === 7)\n            .sort(alphabeticalSort);\n        const fourteen = shoppingListArray\n            .filter(item => item.timeFrame === 14)\n            .sort(alphabeticalSort);\n        const thirty = shoppingListArray\n            .filter(item => item.timeFrame === 30)\n            .sort(alphabeticalSort);\n        const inactive = shoppingListArray\n            .filter(item => item.timeFrame === 0)\n            .sort(alphabeticalSort);\n\n        return seven\n            .concat(fourteen)\n            .concat(thirty)\n            .concat(inactive);\n    };\n    const flagInactive = shoppingListArray => {\n        const now = moment(Date.now());\n        return shoppingListArray.map(item => {\n            const initialDate = moment(item.lastPurchaseDate);\n            if (now.diff(initialDate, 'd') > 2 * item.timeFrame) {\n                item.timeFrame = 0;\n            }\n            return item;\n        });\n    };\n\n    const getShoppingList = () => {\n        const db = fb.firestore();\n        if (userToken) {\n            db.collection(userToken)\n                .get()\n                .then(querySnapshot => {\n                    let allData = [];\n                    querySnapshot.forEach(doc => {\n                        let data = doc.data();\n                        data = {\n                            isChecked: data.lastPurchaseDate\n                                ? lessThan24Hours(data.lastPurchaseDate)\n                                : false,\n                            ...data,\n                        };\n                        allData.push(data);\n                    });\n                    const flaggedData = flagInactive(allData);\n                    setShoppingListItems(\n                        filterShoppingListByTimeframe(flaggedData)\n                    );\n                });\n        } else {\n            // history.push('/Home');\n            history.push('/');\n        }\n    };\n\n    useEffect(() => {\n        getShoppingList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const lessThan24Hours = date => {\n        const formattedDate = parseInt(moment(date).format());\n        const newDate = moment(Date.now());\n        const lastPurchase = moment(formattedDate);\n        return lastPurchase.diff(newDate, 'hours') < 24;\n    };\n\n    const handleCheck = (e, item) => {\n        const numberOfPurchases = !item.isChecked\n            ? (item.numOfPurchases || 0) + 1\n            : item.numOfPurchases;\n\n        if (!(item.lastPurchaseDate == null)) {\n            let lastEstimate;\n            item.nextPurchaseDate\n                ? (lastEstimate = item.nextPurchaseDate)\n                : (lastEstimate = item.timeFrame);\n            let lastPurchaseDate = item.lastPurchaseDate;\n            let today = moment(Date.now());\n            let lastPurchase = moment(lastPurchaseDate);\n            let latestInterval = today.diff(lastPurchase, 'days');\n\n            let db = fb.firestore();\n            let nextPurchaseDate = calculateEstimate(\n                item.lastEstimate,\n                latestInterval,\n                item.numOfPurchases\n            );\n            db.collection(userToken)\n                .doc(e.target.name)\n                .update({\n                    lastPurchaseDate,\n                    numOfPurchases: numberOfPurchases,\n                    latestInterval,\n                    lastEstimate,\n                    nextPurchaseDate,\n                    isChecked: e.target.checked,\n                })\n                .then(function() {\n                    getShoppingList();\n                });\n        } else {\n            let lastPurchaseDate = moment(Date.now()).format();\n            let db = fb.firestore();\n            db.collection(userToken)\n                .doc(e.target.name)\n                .update({\n                    isChecked: e.target.checked,\n                    lastPurchaseDate,\n                    numOfPurchases: numberOfPurchases,\n                })\n                .then(function() {\n                    getShoppingList();\n                });\n        }\n    };\n\n    const deleteItem = item => {\n        let db = fb.firestore();\n        db.collection(userToken)\n            .doc(item.id)\n            .delete()\n            .then(() => {\n                getShoppingList();\n                setDeleteModal(false);\n            });\n    };\n\n    const filteredList = shoppingListItems.filter(item => {\n        return item.itemName.toLowerCase().includes(filterString.toLowerCase());\n    });\n\n    const searchLength = () => {\n        if (shoppingListItems.length > 0)\n            return (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input\n                                className=\"searchInputField\"\n                                type=\"text\"\n                                placeholder=\"Search for an item\"\n                                value={filterString}\n                                onChange={e => setFilterString(e.target.value)}\n                            />\n                        </div>\n                    </div>\n                    <button\n                        className=\"searchFieldEraseButton\"\n                        onClick={() => setFilterString('')}\n                    >\n                        Clear search\n                    </button>\n                </div>\n            );\n    };\n\n    return (\n        <div>\n            <section className=\"shareContainer\">\n                Here's your token to share with a friend:\n                <h1>{token}</h1>{' '}\n            </section>\n\n            {deleteModal ? (\n                <Modal\n                    item={currentItem}\n                    deleteItem={deleteItem}\n                    cancelItem={() => {\n                        setDeleteModal(false);\n                    }}\n                    type=\"deleteItem\"\n                />\n            ) : null}\n            {detailModal ? (\n                <Modal\n                    item={currentItem}\n                    setDetailModal={setDetailModal}\n                    cancelItem={() => {\n                        setDetailModal(false);\n                    }}\n                    type=\"detail\"\n                />\n            ) : null}\n            <section className=\"searchContainer\">\n                {searchLength()}\n\n                <tbody className=\"shoppingListContainer\">\n                    {filterString\n                        ? filteredList.map(item => {\n                              return (\n                                  <ShoppingListItem\n                                      item={item}\n                                      handleCheck={handleCheck}\n                                      currentItem={currentItem}\n                                      setCurrentItem={setCurrentItem}\n                                      detailModal={detailModal}\n                                      setDetailModal={setDetailModal}\n                                      setDeleteModal={setDeleteModal}\n                                      deleteItem={deleteItem}\n                                  />\n                              );\n                          })\n                        : shoppingListItems.length > 0\n                        ? shoppingListItems.map(item => (\n                              <ShoppingListItem\n                                  item={item}\n                                  handleCheck={handleCheck}\n                                  currentItem={currentItem}\n                                  setCurrentItem={setCurrentItem}\n                                  detailModal={detailModal}\n                                  setDetailModal={setDetailModal}\n                                  setDeleteModal={setDeleteModal}\n                                  deleteItem={deleteItem}\n                              />\n                          ))\n                        : welcomeInstructions()}\n                </tbody>\n            </section>\n        </div>\n    );\n};\nexport default ShoppingList;\n","import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport fb from '../lib/firebase';\nimport moment from 'moment';\nimport normalizeString from '../lib/normalizeString';\nimport { Button, Icon, Select } from 'react-materialize';\n\nconst Form = ({ token }) => {\n    const [itemName, setItemName] = useState('');\n    const [timeFrame, setTimeFrame] = useState(7);\n    const [lastPurchaseDate, setLastPurchaseDate] = useState(null);\n    const userToken = token || 'faust lamar uptake';\n    const [shoppingListCollection, setShoppingListCollection] = useState([]);\n    const [duplicateError, setDuplicateError] = useState(false);\n    const [addStatus, setAddStatus] = useState(false);\n\n    const getCurrentShoppingListItems = currentToken => {\n        const db = fb.firestore();\n        const tokenRef = db.collection(currentToken);\n\n        tokenRef\n            .orderBy('timeFrame', 'asc')\n            .get()\n            .then(querySnapshot => {\n                if (!querySnapshot.empty) {\n                    let fullCollection = [];\n                    querySnapshot.forEach(doc => {\n                        let documentData = doc.data();\n                        let nameData = documentData.itemName;\n                        if (nameData) {\n                            nameData = normalizeString(nameData);\n                            fullCollection.push(nameData);\n                        }\n                    });\n                    setShoppingListCollection(fullCollection);\n                }\n            })\n            .catch(error => {\n                console.log('Error getting document:', error);\n            });\n    };\n    useEffect(() => {\n        getCurrentShoppingListItems(userToken);\n    }, [token, addStatus, userToken]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setDuplicateError(false);\n        let db = fb.firestore();\n        let tokenRef = db.collection(userToken);\n        let normalizeItemName = normalizeString(itemName);\n        if (!shoppingListCollection.includes(normalizeItemName)) {\n            let data = {\n                numOfPurchases: 0,\n                itemName,\n                timeFrame: parseInt(timeFrame),\n                lastPurchaseDate: lastPurchaseDate\n                    ? moment(lastPurchaseDate).format()\n                    : null,\n                isChecked: false,\n            };\n            tokenRef\n                .add(data)\n                .then(docRef => {\n                    tokenRef.doc(docRef.id).update({ id: docRef.id });\n                    getCurrentShoppingListItems(userToken);\n                    setAddStatus(true);\n                    alert(' Item Added!🙌');\n                    if (!alert('Item Added!🙌')) {\n                        window.location.reload();\n                    }\n                })\n                .catch(error =>\n                    console.error('Error writing document: ', error)\n                );\n        } else {\n            setDuplicateError(true);\n        }\n    };\n\n    const renderRedirect = () => {\n        setAddStatus(false);\n        return <Redirect to=\"/AddItem\" />;\n    };\n\n    return (\n        <div>\n            {addStatus ? (\n                renderRedirect()\n            ) : (\n                <form id=\"addItemForm\" onSubmit={e => handleSubmit(e)}>\n                    <div>\n                        <h1>Add a new item to your list.</h1>\n                    </div>\n                    <img\n                        src=\"/img/005-shopping-basket.png\"\n                        alt=\"Shopping List Basket\"\n                    />\n                    <div>\n                        <h2>Name of the item</h2>\n                    </div>\n                    <input\n                        name=\"item name\"\n                        type=\"text\"\n                        placeholder=\"ie: apple\"\n                        value={itemName}\n                        onChange={e => setItemName(e.target.value)}\n                        required\n                    />\n\n                    <div>\n                        <h2>How soon will you need it again?</h2>\n                    </div>\n                    <Select\n                        id=\"Select-9\"\n                        multiple={false}\n                        name=\"time frame\"\n                        onChange={e => setTimeFrame(e.target.value)}\n                    >\n                        <option disabled value=\"\">\n                            Choose your option\n                        </option>\n                        <option value={7}>Soon (in the next 7 days)</option>\n                        <option value={14}>\n                            Kind of soon (in the next 14 days)\n                        </option>\n                        <option value={30}>\n                            Not soon (in the next 30 days)\n                        </option>\n                    </Select>\n                    <div>\n                        <h2>Last purchase date?</h2>\n                    </div>\n                    <input\n                        type=\"date\"\n                        name=\"last purchase date\"\n                        placeholder=\"Last Purchase Date\"\n                        value={lastPurchaseDate}\n                        onChange={e => setLastPurchaseDate(e.target.value)}\n                    />\n\n                    {duplicateError ? (\n                        <div className=\"errorMessage\">\n                            There is a duplicate item in your shopping list.\n                        </div>\n                    ) : null}\n                    <Button node=\"button\" type=\"submit\" waves=\"light\">\n                        Submit\n                        <Icon right>send</Icon>\n                    </Button>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default Form;\n","import React from 'react';\nimport Form from \"../../src/components/AddItemForm\";\n\nconst AddItem = (props) => {\n  return (\n\t<div>\n    <Form token={props.token}/>\n\t</div>\n  )\n};\n\nexport default AddItem;","const words = [\"aaa\", \"aaaa\", \"aaron\", \"aba\", \"ababa\", \"aback\", \"abase\", \"abash\", \"abate\", \"abbas\", \"abbe\", \"abbey\", \"abbot\", \"abbott\", \"abc\", \"abe\", \"abed\", \"abel\", \"abet\", \"abide\", \"abject\", \"ablaze\", \"able\", \"abner\", \"abo\", \"abode\", \"abort\", \"about\", \"above\", \"abrade\", \"abram\", \"absorb\", \"abuse\", \"abut\", \"abyss\", \"acadia\", \"accra\", \"accrue\", \"ace\", \"acetic\", \"ache\", \"acid\", \"acidic\", \"acm\", \"acme\", \"acorn\", \"acre\", \"acrid\", \"act\", \"acton\", \"actor\", \"acts\", \"acuity\", \"acute\", \"ada\", \"adage\", \"adagio\", \"adair\", \"adam\", \"adams\", \"adapt\", \"add\", \"added\", \"addict\", \"addis\", \"addle\", \"adele\", \"aden\", \"adept\", \"adieu\", \"adjust\", \"adler\", \"admit\", \"admix\", \"ado\", \"adobe\", \"adonis\", \"adopt\", \"adore\", \"adorn\", \"adult\", \"advent\", \"advert\", \"advise\", \"aegis\", \"aeneid\", \"afar\", \"affair\", \"affine\", \"affix\", \"afire\", \"afoot\", \"afraid\", \"africa\", \"afro\", \"aft\", \"again\", \"agate\", \"agave\", \"age\", \"agee\", \"agenda\", \"agent\", \"agile\", \"aging\", \"agnes\", \"agnew\", \"ago\", \"agone\", \"agony\", \"agree\", \"ague\", \"agway\", \"ahead\", \"ahem\", \"ahoy\", \"aid\", \"aida\", \"aide\", \"aides\", \"aiken\", \"ail\", \"aile\", \"aim\", \"ainu\", \"air\", \"aires\", \"airman\", \"airway\", \"airy\", \"aisle\", \"ajar\", \"ajax\", \"akers\", \"akin\", \"akron\", \"ala\", \"alai\", \"alamo\", \"alan\", \"alarm\", \"alaska\", \"alb\", \"alba\", \"album\", \"alcoa\", \"alden\", \"alder\", \"ale\", \"alec\", \"aleck\", \"aleph\", \"alert\", \"alex\", \"alexei\", \"alga\", \"algae\", \"algal\", \"alger\", \"algol\", \"ali\", \"alia\", \"alias\", \"alibi\", \"alice\", \"alien\", \"alight\", \"align\", \"alike\", \"alive\", \"all\", \"allah\", \"allan\", \"allay\", \"allen\", \"alley\", \"allied\", \"allis\", \"allot\", \"allow\", \"alloy\", \"allure\", \"ally\", \"allyl\", \"allyn\", \"alma\", \"almost\", \"aloe\", \"aloft\", \"aloha\", \"alone\", \"along\", \"aloof\", \"aloud\", \"alp\", \"alpha\", \"alps\", \"also\", \"alsop\", \"altair\", \"altar\", \"alter\", \"alto\", \"alton\", \"alum\", \"alumni\", \"alva\", \"alvin\", \"alway\", \"ama\", \"amass\", \"amaze\", \"amber\", \"amble\", \"ambush\", \"amen\", \"amend\", \"ames\", \"ami\", \"amid\", \"amide\", \"amigo\", \"amino\", \"amiss\", \"amity\", \"amman\", \"ammo\", \"amoco\", \"amok\", \"among\", \"amort\", \"amos\", \"amp\", \"ampere\", \"ampex\", \"ample\", \"amply\", \"amra\", \"amulet\", \"amuse\", \"amy\", \"ana\", \"and\", \"andes\", \"andre\", \"andrew\", \"andy\", \"anent\", \"anew\", \"angel\", \"angelo\", \"anger\", \"angie\", \"angle\", \"anglo\", \"angola\", \"angry\", \"angst\", \"angus\", \"ani\", \"anion\", \"anise\", \"anita\", \"ankle\", \"ann\", \"anna\", \"annal\", \"anne\", \"annex\", \"annie\", \"annoy\", \"annul\", \"annuli\", \"annum\", \"anode\", \"ansi\", \"answer\", \"ant\", \"ante\", \"anti\", \"antic\", \"anton\", \"anus\", \"anvil\", \"any\", \"anyhow\", \"anyway\", \"aok\", \"aorta\", \"apart\", \"apathy\", \"ape\", \"apex\", \"aphid\", \"aplomb\", \"appeal\", \"append\", \"apple\", \"apply\", \"april\", \"apron\", \"apse\", \"apt\", \"aqua\", \"arab\", \"araby\", \"arc\", \"arcana\", \"arch\", \"archer\", \"arden\", \"ardent\", \"are\", \"area\", \"arena\", \"ares\", \"argive\", \"argo\", \"argon\", \"argot\", \"argue\", \"argus\", \"arhat\", \"arid\", \"aries\", \"arise\", \"ark\", \"arlen\", \"arlene\", \"arm\", \"armco\", \"army\", \"arnold\", \"aroma\", \"arose\", \"arpa\", \"array\", \"arrear\", \"arrow\", \"arson\", \"art\", \"artery\", \"arthur\", \"artie\", \"arty\", \"aruba\", \"arum\", \"aryl\", \"ascend\", \"ash\", \"ashen\", \"asher\", \"ashley\", \"ashy\", \"asia\", \"aside\", \"ask\", \"askew\", \"asleep\", \"aspen\", \"aspire\", \"ass\", \"assai\", \"assam\", \"assay\", \"asset\", \"assort\", \"assure\", \"aster\", \"astm\", \"astor\", \"astral\", \"ate\", \"athens\", \"atlas\", \"atom\", \"atomic\", \"atone\", \"atop\", \"attic\", \"attire\", \"aubrey\", \"audio\", \"audit\", \"aug\", \"auger\", \"augur\", \"august\", \"auk\", \"aunt\", \"aura\", \"aural\", \"auric\", \"austin\", \"auto\", \"autumn\", \"avail\", \"ave\", \"aver\", \"avert\", \"avery\", \"aviate\", \"avid\", \"avis\", \"aviv\", \"avoid\", \"avon\", \"avow\", \"await\", \"awake\", \"award\", \"aware\", \"awash\", \"away\", \"awe\", \"awful\", \"awl\", \"awn\", \"awoke\", \"awry\", \"axe\", \"axes\", \"axial\", \"axiom\", \"axis\", \"axle\", \"axon\", \"aye\", \"ayers\", \"aztec\", \"azure\", \"babe\", \"babel\", \"baby\", \"bach\", \"back\", \"backup\", \"bacon\", \"bad\", \"bade\", \"baden\", \"badge\", \"baffle\", \"bag\", \"baggy\", \"bah\", \"bahama\", \"bail\", \"baird\", \"bait\", \"bake\", \"baku\", \"bald\", \"baldy\", \"bale\", \"bali\", \"balk\", \"balkan\", \"balky\", \"ball\", \"balled\", \"ballot\", \"balm\", \"balmy\", \"balsa\", \"bam\", \"bambi\", \"ban\", \"banal\", \"band\", \"bandit\", \"bandy\", \"bane\", \"bang\", \"banish\", \"banjo\", \"bank\", \"banks\", \"bantu\", \"bar\", \"barb\", \"bard\", \"bare\", \"barfly\", \"barge\", \"bark\", \"barley\", \"barn\", \"barnes\", \"baron\", \"barony\", \"barr\", \"barre\", \"barry\", \"barter\", \"barth\", \"barton\", \"basal\", \"base\", \"basel\", \"bash\", \"basic\", \"basil\", \"basin\", \"basis\", \"bask\", \"bass\", \"bassi\", \"basso\", \"baste\", \"bat\", \"batch\", \"bate\", \"bater\", \"bates\", \"bath\", \"bathe\", \"batik\", \"baton\", \"bator\", \"batt\", \"bauble\", \"baud\", \"bauer\", \"bawd\", \"bawdy\", \"bawl\", \"baxter\", \"bay\", \"bayda\", \"bayed\", \"bayou\", \"bazaar\", \"bbb\", \"bbbb\", \"bcd\", \"beach\", \"bead\", \"beady\", \"beak\", \"beam\", \"bean\", \"bear\", \"beard\", \"beast\", \"beat\", \"beau\", \"beauty\", \"beaux\", \"bebop\", \"becalm\", \"beck\", \"becker\", \"becky\", \"bed\", \"bedim\", \"bee\", \"beebe\", \"beech\", \"beef\", \"beefy\", \"been\", \"beep\", \"beer\", \"beet\", \"befall\", \"befit\", \"befog\", \"beg\", \"began\", \"beget\", \"beggar\", \"begin\", \"begun\", \"behind\", \"beige\", \"being\", \"beirut\", \"bel\", \"bela\", \"belch\", \"belfry\", \"belie\", \"bell\", \"bella\", \"belle\", \"belly\", \"below\", \"belt\", \"bema\", \"beman\", \"bemoan\", \"ben\", \"bench\", \"bend\", \"bender\", \"benny\", \"bent\", \"benz\", \"berea\", \"bereft\", \"beret\", \"berg\", \"berlin\", \"bern\", \"berne\", \"bernet\", \"berra\", \"berry\", \"bert\", \"berth\", \"beryl\", \"beset\", \"bess\", \"bessel\", \"best\", \"bestir\", \"bet\", \"beta\", \"betel\", \"beth\", \"bethel\", \"betsy\", \"bette\", \"betty\", \"bevel\", \"bevy\", \"beware\", \"bey\", \"bezel\", \"bhoy\", \"bias\", \"bib\", \"bibb\", \"bible\", \"bicep\", \"biceps\", \"bid\", \"biddy\", \"bide\", \"bien\", \"big\", \"biggs\", \"bigot\", \"bile\", \"bilge\", \"bilk\", \"bill\", \"billow\", \"billy\", \"bin\", \"binary\", \"bind\", \"bing\", \"binge\", \"bingle\", \"bini\", \"biota\", \"birch\", \"bird\", \"birdie\", \"birth\", \"bison\", \"bisque\", \"bit\", \"bitch\", \"bite\", \"bitt\", \"bitten\", \"biz\", \"bizet\", \"blab\", \"black\", \"blade\", \"blair\", \"blake\", \"blame\", \"blanc\", \"bland\", \"blank\", \"blare\", \"blast\", \"blat\", \"blatz\", \"blaze\", \"bleak\", \"bleat\", \"bled\", \"bleed\", \"blend\", \"bless\", \"blest\", \"blew\", \"blimp\", \"blind\", \"blink\", \"blinn\", \"blip\", \"bliss\", \"blithe\", \"blitz\", \"bloat\", \"blob\", \"bloc\", \"bloch\", \"block\", \"bloke\", \"blond\", \"blonde\", \"blood\", \"bloom\", \"bloop\", \"blot\", \"blotch\", \"blow\", \"blown\", \"blue\", \"bluet\", \"bluff\", \"blum\", \"blunt\", \"blur\", \"blurt\", \"blush\", \"blvd\", \"blythe\", \"bmw\", \"boa\", \"boar\", \"board\", \"boast\", \"boat\", \"bob\", \"bobbin\", \"bobby\", \"bobcat\", \"boca\", \"bock\", \"bode\", \"body\", \"bog\", \"bogey\", \"boggy\", \"bogus\", \"bogy\", \"bohr\", \"boil\", \"bois\", \"boise\", \"bold\", \"bole\", \"bolo\", \"bolt\", \"bomb\", \"bombay\", \"bon\", \"bona\", \"bond\", \"bone\", \"bong\", \"bongo\", \"bonn\", \"bonus\", \"bony\", \"bonze\", \"boo\", \"booby\", \"boogie\", \"book\", \"booky\", \"boom\", \"boon\", \"boone\", \"boor\", \"boost\", \"boot\", \"booth\", \"booty\", \"booze\", \"bop\", \"borax\", \"border\", \"bore\", \"borg\", \"boric\", \"boris\", \"born\", \"borne\", \"borneo\", \"boron\", \"bosch\", \"bose\", \"bosom\", \"boson\", \"boss\", \"boston\", \"botch\", \"both\", \"bottle\", \"bough\", \"bouncy\", \"bound\", \"bourn\", \"bout\", \"bovine\", \"bow\", \"bowel\", \"bowen\", \"bowie\", \"bowl\", \"box\", \"boxy\", \"boy\", \"boyar\", \"boyce\", \"boyd\", \"boyle\", \"brace\", \"bract\", \"brad\", \"brady\", \"brae\", \"brag\", \"bragg\", \"braid\", \"brain\", \"brainy\", \"brake\", \"bran\", \"brand\", \"brandt\", \"brant\", \"brash\", \"brass\", \"brassy\", \"braun\", \"brave\", \"bravo\", \"brawl\", \"bray\", \"bread\", \"break\", \"bream\", \"breath\", \"bred\", \"breed\", \"breeze\", \"bremen\", \"brent\", \"brest\", \"brett\", \"breve\", \"brew\", \"brian\", \"briar\", \"bribe\", \"brice\", \"brick\", \"bride\", \"brief\", \"brig\", \"briggs\", \"brim\", \"brine\", \"bring\", \"brink\", \"briny\", \"brisk\", \"broad\", \"brock\", \"broil\", \"broke\", \"broken\", \"bronx\", \"brood\", \"brook\", \"brooke\", \"broom\", \"broth\", \"brow\", \"brown\", \"browse\", \"bruce\", \"bruit\", \"brunch\", \"bruno\", \"brunt\", \"brush\", \"brute\", \"bryan\", \"bryant\", \"bryce\", \"bryn\", \"bstj\", \"btl\", \"bub\", \"buck\", \"bud\", \"budd\", \"buddy\", \"budge\", \"buena\", \"buenos\", \"buff\", \"bug\", \"buggy\", \"bugle\", \"buick\", \"build\", \"built\", \"bulb\", \"bulge\", \"bulk\", \"bulky\", \"bull\", \"bully\", \"bum\", \"bump\", \"bun\", \"bunch\", \"bundy\", \"bunk\", \"bunny\", \"bunt\", \"bunyan\", \"buoy\", \"burch\", \"bureau\", \"buret\", \"burg\", \"buried\", \"burke\", \"burl\", \"burly\", \"burma\", \"burn\", \"burnt\", \"burp\", \"burr\", \"burro\", \"burst\", \"burt\", \"burton\", \"burtt\", \"bury\", \"bus\", \"busch\", \"bush\", \"bushel\", \"bushy\", \"buss\", \"bust\", \"busy\", \"but\", \"butane\", \"butch\", \"buteo\", \"butt\", \"butte\", \"butyl\", \"buxom\", \"buy\", \"buyer\", \"buzz\", \"buzzy\", \"bye\", \"byers\", \"bylaw\", \"byline\", \"byrd\", \"byrne\", \"byron\", \"byte\", \"byway\", \"byword\", \"cab\", \"cabal\", \"cabin\", \"cable\", \"cabot\", \"cacao\", \"cache\", \"cacm\", \"cacti\", \"caddy\", \"cadent\", \"cadet\", \"cadre\", \"cady\", \"cafe\", \"cage\", \"cagey\", \"cahill\", \"caiman\", \"cain\", \"caine\", \"cairn\", \"cairo\", \"cake\", \"cal\", \"calder\", \"caleb\", \"calf\", \"call\", \"calla\", \"callus\", \"calm\", \"calve\", \"cam\", \"camber\", \"came\", \"camel\", \"cameo\", \"camp\", \"can\", \"canal\", \"canary\", \"cancer\", \"candle\", \"candy\", \"cane\", \"canis\", \"canna\", \"cannot\", \"canny\", \"canoe\", \"canon\", \"canopy\", \"cant\", \"canto\", \"canton\", \"cap\", \"cape\", \"caper\", \"capo\", \"car\", \"carbon\", \"card\", \"care\", \"caress\", \"caret\", \"carey\", \"cargo\", \"carib\", \"carl\", \"carla\", \"carlo\", \"carne\", \"carob\", \"carol\", \"carp\", \"carpet\", \"carr\", \"carrie\", \"carry\", \"carson\", \"cart\", \"carte\", \"caruso\", \"carve\", \"case\", \"casey\", \"cash\", \"cashew\", \"cask\", \"casket\", \"cast\", \"caste\", \"cat\", \"catch\", \"cater\", \"cathy\", \"catkin\", \"catsup\", \"cauchy\", \"caulk\", \"cause\", \"cave\", \"cavern\", \"cavil\", \"cavort\", \"caw\", \"cayuga\", \"cbs\", \"ccc\", \"cccc\", \"cdc\", \"cease\", \"cecil\", \"cedar\", \"cede\", \"ceil\", \"celia\", \"cell\", \"census\", \"cent\", \"ceres\", \"cern\", \"cetera\", \"cetus\", \"chad\", \"chafe\", \"chaff\", \"chai\", \"chain\", \"chair\", \"chalk\", \"champ\", \"chance\", \"chang\", \"chant\", \"chao\", \"chaos\", \"chap\", \"chapel\", \"char\", \"chard\", \"charm\", \"chart\", \"chase\", \"chasm\", \"chaste\", \"chat\", \"chaw\", \"cheap\", \"cheat\", \"check\", \"cheek\", \"cheeky\", \"cheer\", \"chef\", \"chen\", \"chert\", \"cherub\", \"chess\", \"chest\", \"chevy\", \"chew\", \"chi\", \"chic\", \"chick\", \"chide\", \"chief\", \"child\", \"chile\", \"chili\", \"chill\", \"chilly\", \"chime\", \"chin\", \"china\", \"chine\", \"chink\", \"chip\", \"chirp\", \"chisel\", \"chit\", \"chive\", \"chock\", \"choir\", \"choke\", \"chomp\", \"chop\", \"chopin\", \"choral\", \"chord\", \"chore\", \"chose\", \"chosen\", \"chou\", \"chow\", \"chris\", \"chub\", \"chuck\", \"chuff\", \"chug\", \"chum\", \"chump\", \"chunk\", \"churn\", \"chute\", \"cia\", \"cicada\", \"cider\", \"cigar\", \"cilia\", \"cinch\", \"cindy\", \"cipher\", \"circa\", \"circe\", \"cite\", \"citrus\", \"city\", \"civet\", \"civic\", \"civil\", \"clad\", \"claim\", \"clam\", \"clammy\", \"clamp\", \"clan\", \"clang\", \"clank\", \"clap\", \"clara\", \"clare\", \"clark\", \"clarke\", \"clash\", \"clasp\", \"class\", \"claus\", \"clause\", \"claw\", \"clay\", \"clean\", \"clear\", \"cleat\", \"cleft\", \"clerk\", \"cliche\", \"click\", \"cliff\", \"climb\", \"clime\", \"cling\", \"clink\", \"clint\", \"clio\", \"clip\", \"clive\", \"cloak\", \"clock\", \"clod\", \"clog\", \"clomp\", \"clone\", \"close\", \"closet\", \"clot\", \"cloth\", \"cloud\", \"clout\", \"clove\", \"clown\", \"cloy\", \"club\", \"cluck\", \"clue\", \"cluj\", \"clump\", \"clumsy\", \"clung\", \"clyde\", \"coach\", \"coal\", \"coast\", \"coat\", \"coax\", \"cobb\", \"cobble\", \"cobol\", \"cobra\", \"coca\", \"cock\", \"cockle\", \"cocky\", \"coco\", \"cocoa\", \"cod\", \"coda\", \"coddle\", \"code\", \"codon\", \"cody\", \"coed\", \"cog\", \"cogent\", \"cohen\", \"cohn\", \"coil\", \"coin\", \"coke\", \"col\", \"cola\", \"colby\", \"cold\", \"cole\", \"colon\", \"colony\", \"colt\", \"colza\", \"coma\", \"comb\", \"combat\", \"come\", \"comet\", \"cometh\", \"comic\", \"comma\", \"con\", \"conch\", \"cone\", \"coney\", \"congo\", \"conic\", \"conn\", \"conner\", \"conway\", \"cony\", \"coo\", \"cook\", \"cooke\", \"cooky\", \"cool\", \"cooley\", \"coon\", \"coop\", \"coors\", \"coot\", \"cop\", \"cope\", \"copra\", \"copy\", \"coral\", \"corbel\", \"cord\", \"core\", \"corey\", \"cork\", \"corn\", \"corny\", \"corp\", \"corps\", \"corvus\", \"cos\", \"cosec\", \"coset\", \"cosh\", \"cost\", \"costa\", \"cosy\", \"cot\", \"cotta\", \"cotty\", \"couch\", \"cough\", \"could\", \"count\", \"coup\", \"coupe\", \"court\", \"cousin\", \"cove\", \"coven\", \"cover\", \"covet\", \"cow\", \"cowan\", \"cowl\", \"cowman\", \"cowry\", \"cox\", \"coy\", \"coyote\", \"coypu\", \"cozen\", \"cozy\", \"cpa\", \"crab\", \"crack\", \"craft\", \"crag\", \"craig\", \"cram\", \"cramp\", \"crane\", \"crank\", \"crap\", \"crash\", \"crass\", \"crate\", \"crater\", \"crave\", \"craw\", \"crawl\", \"craze\", \"crazy\", \"creak\", \"cream\", \"credit\", \"credo\", \"creed\", \"creek\", \"creep\", \"creole\", \"creon\", \"crepe\", \"crept\", \"cress\", \"crest\", \"crete\", \"crew\", \"crib\", \"cried\", \"crime\", \"crimp\", \"crisp\", \"criss\", \"croak\", \"crock\", \"crocus\", \"croft\", \"croix\", \"crone\", \"crony\", \"crook\", \"croon\", \"crop\", \"cross\", \"crow\", \"crowd\", \"crown\", \"crt\", \"crud\", \"crude\", \"cruel\", \"crumb\", \"crump\", \"crush\", \"crust\", \"crux\", \"cruz\", \"cry\", \"crypt\", \"cub\", \"cuba\", \"cube\", \"cubic\", \"cud\", \"cuddle\", \"cue\", \"cuff\", \"cull\", \"culpa\", \"cult\", \"cumin\", \"cuny\", \"cup\", \"cupful\", \"cupid\", \"cur\", \"curb\", \"curd\", \"cure\", \"curfew\", \"curia\", \"curie\", \"curio\", \"curl\", \"curry\", \"curse\", \"curt\", \"curve\", \"cusp\", \"cut\", \"cute\", \"cutlet\", \"cycad\", \"cycle\", \"cynic\", \"cyril\", \"cyrus\", \"cyst\", \"czar\", \"czech\", \"dab\", \"dacca\", \"dactyl\", \"dad\", \"dada\", \"daddy\", \"dade\", \"daffy\", \"dahl\", \"dahlia\", \"dairy\", \"dais\", \"daisy\", \"dakar\", \"dale\", \"daley\", \"dally\", \"daly\", \"dam\", \"dame\", \"damn\", \"damon\", \"damp\", \"damsel\", \"dan\", \"dana\", \"dance\", \"dandy\", \"dane\", \"dang\", \"dank\", \"danny\", \"dante\", \"dar\", \"dare\", \"dark\", \"darken\", \"darn\", \"darry\", \"dart\", \"dash\", \"data\", \"date\", \"dater\", \"datum\", \"daub\", \"daunt\", \"dave\", \"david\", \"davis\", \"davit\", \"davy\", \"dawn\", \"dawson\", \"day\", \"daze\", \"ddd\", \"dddd\", \"deacon\", \"dead\", \"deaf\", \"deal\", \"dealt\", \"dean\", \"deane\", \"dear\", \"death\", \"debar\", \"debby\", \"debit\", \"debra\", \"debris\", \"debt\", \"debug\", \"debut\", \"dec\", \"decal\", \"decay\", \"decca\", \"deck\", \"decker\", \"decor\", \"decree\", \"decry\", \"dee\", \"deed\", \"deem\", \"deep\", \"deer\", \"deere\", \"def\", \"defer\", \"deform\", \"deft\", \"defy\", \"degas\", \"degum\", \"deify\", \"deign\", \"deity\", \"deja\", \"del\", \"delay\", \"delft\", \"delhi\", \"delia\", \"dell\", \"della\", \"delta\", \"delve\", \"demark\", \"demit\", \"demon\", \"demur\", \"den\", \"deneb\", \"denial\", \"denny\", \"dense\", \"dent\", \"denton\", \"deny\", \"depot\", \"depth\", \"depute\", \"derby\", \"derek\", \"des\", \"desist\", \"desk\", \"detach\", \"deter\", \"deuce\", \"deus\", \"devil\", \"devoid\", \"devon\", \"dew\", \"dewar\", \"dewey\", \"dewy\", \"dey\", \"dhabi\", \"dial\", \"diana\", \"diane\", \"diary\", \"dibble\", \"dice\", \"dick\", \"dicta\", \"did\", \"dido\", \"die\", \"died\", \"diego\", \"diem\", \"diesel\", \"diet\", \"diety\", \"dietz\", \"dig\", \"digit\", \"dilate\", \"dill\", \"dim\", \"dime\", \"din\", \"dinah\", \"dine\", \"ding\", \"dingo\", \"dingy\", \"dint\", \"diode\", \"dip\", \"dirac\", \"dire\", \"dirge\", \"dirt\", \"dirty\", \"dis\", \"disc\", \"dish\", \"disk\", \"disney\", \"ditch\", \"ditto\", \"ditty\", \"diva\", \"divan\", \"dive\", \"dixie\", \"dixon\", \"dizzy\", \"dna\", \"dobbs\", \"dobson\", \"dock\", \"docket\", \"dod\", \"dodd\", \"dodge\", \"dodo\", \"doe\", \"doff\", \"dog\", \"doge\", \"dogma\", \"dolan\", \"dolce\", \"dole\", \"doll\", \"dolly\", \"dolt\", \"dome\", \"don\", \"done\", \"doneck\", \"donna\", \"donor\", \"doom\", \"door\", \"dope\", \"dora\", \"doria\", \"doric\", \"doris\", \"dose\", \"dot\", \"dote\", \"double\", \"doubt\", \"douce\", \"doug\", \"dough\", \"dour\", \"douse\", \"dove\", \"dow\", \"dowel\", \"down\", \"downs\", \"dowry\", \"doyle\", \"doze\", \"dozen\", \"drab\", \"draco\", \"draft\", \"drag\", \"drain\", \"drake\", \"dram\", \"drama\", \"drank\", \"drape\", \"draw\", \"drawl\", \"drawn\", \"dread\", \"dream\", \"dreamy\", \"dreg\", \"dress\", \"dressy\", \"drew\", \"drib\", \"dried\", \"drier\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"droll\", \"drone\", \"drool\", \"droop\", \"drop\", \"dross\", \"drove\", \"drown\", \"drub\", \"drug\", \"druid\", \"drum\", \"drunk\", \"drury\", \"dry\", \"dryad\", \"dual\", \"duane\", \"dub\", \"dubhe\", \"dublin\", \"ducat\", \"duck\", \"duct\", \"dud\", \"due\", \"duel\", \"duet\", \"duff\", \"duffy\", \"dug\", \"dugan\", \"duke\", \"dull\", \"dully\", \"dulse\", \"duly\", \"duma\", \"dumb\", \"dummy\", \"dump\", \"dumpy\", \"dun\", \"dunce\", \"dune\", \"dung\", \"dunham\", \"dunk\", \"dunlop\", \"dunn\", \"dupe\", \"durer\", \"dusk\", \"dusky\", \"dust\", \"dusty\", \"dutch\", \"duty\", \"dwarf\", \"dwell\", \"dwelt\", \"dwight\", \"dwyer\", \"dyad\", \"dye\", \"dyer\", \"dying\", \"dyke\", \"dylan\", \"dyne\", \"each\", \"eagan\", \"eager\", \"eagle\", \"ear\", \"earl\", \"earn\", \"earth\", \"ease\", \"easel\", \"east\", \"easy\", \"eat\", \"eaten\", \"eater\", \"eaton\", \"eave\", \"ebb\", \"eben\", \"ebony\", \"echo\", \"eclat\", \"ecole\", \"eddie\", \"eddy\", \"eden\", \"edgar\", \"edge\", \"edgy\", \"edict\", \"edify\", \"edit\", \"edith\", \"editor\", \"edna\", \"edt\", \"edwin\", \"eee\", \"eeee\", \"eel\", \"eeoc\", \"eerie\", \"efface\", \"effie\", \"efg\", \"eft\", \"egan\", \"egg\", \"ego\", \"egress\", \"egret\", \"egypt\", \"eider\", \"eight\", \"eire\", \"eject\", \"eke\", \"elan\", \"elate\", \"elba\", \"elbow\", \"elder\", \"eldon\", \"elect\", \"elegy\", \"elena\", \"eleven\", \"elfin\", \"elgin\", \"eli\", \"elide\", \"eliot\", \"elite\", \"elk\", \"ell\", \"ella\", \"ellen\", \"ellis\", \"elm\", \"elmer\", \"elope\", \"else\", \"elsie\", \"elton\", \"elude\", \"elute\", \"elves\", \"ely\", \"embalm\", \"embark\", \"embed\", \"ember\", \"emcee\", \"emery\", \"emil\", \"emile\", \"emily\", \"emit\", \"emma\", \"emory\", \"empty\", \"enact\", \"enamel\", \"end\", \"endow\", \"enemy\", \"eng\", \"engel\", \"engle\", \"engulf\", \"enid\", \"enjoy\", \"enmity\", \"enoch\", \"enol\", \"enos\", \"enrico\", \"ensue\", \"enter\", \"entrap\", \"entry\", \"envoy\", \"envy\", \"epa\", \"epic\", \"epoch\", \"epoxy\", \"epsom\", \"equal\", \"equip\", \"era\", \"erase\", \"erato\", \"erda\", \"ere\", \"erect\", \"erg\", \"eric\", \"erich\", \"erie\", \"erik\", \"ernest\", \"ernie\", \"ernst\", \"erode\", \"eros\", \"err\", \"errand\", \"errol\", \"error\", \"erupt\", \"ervin\", \"erwin\", \"essay\", \"essen\", \"essex\", \"est\", \"ester\", \"estes\", \"estop\", \"eta\", \"etc\", \"etch\", \"ethan\", \"ethel\", \"ether\", \"ethic\", \"ethos\", \"ethyl\", \"etude\", \"eucre\", \"euler\", \"eureka\", \"eva\", \"evade\", \"evans\", \"eve\", \"even\", \"event\", \"every\", \"evict\", \"evil\", \"evoke\", \"evolve\", \"ewe\", \"ewing\", \"exact\", \"exalt\", \"exam\", \"excel\", \"excess\", \"exert\", \"exile\", \"exist\", \"exit\", \"exodus\", \"expel\", \"extant\", \"extent\", \"extol\", \"extra\", \"exude\", \"exult\", \"exxon\", \"eye\", \"eyed\", \"ezra\", \"faa\", \"faber\", \"fable\", \"face\", \"facet\", \"facile\", \"fact\", \"facto\", \"fad\", \"fade\", \"faery\", \"fag\", \"fahey\", \"fail\", \"fain\", \"faint\", \"fair\", \"fairy\", \"faith\", \"fake\", \"fall\", \"false\", \"fame\", \"fan\", \"fancy\", \"fang\", \"fanny\", \"fanout\", \"far\", \"farad\", \"farce\", \"fare\", \"fargo\", \"farley\", \"farm\", \"faro\", \"fast\", \"fat\", \"fatal\", \"fate\", \"fatty\", \"fault\", \"faun\", \"fauna\", \"faust\", \"fawn\", \"fay\", \"faze\", \"fbi\", \"fcc\", \"fda\", \"fear\", \"feast\", \"feat\", \"feb\", \"fed\", \"fee\", \"feed\", \"feel\", \"feet\", \"feign\", \"feint\", \"felice\", \"felix\", \"fell\", \"felon\", \"felt\", \"femur\", \"fence\", \"fend\", \"fermi\", \"fern\", \"ferric\", \"ferry\", \"fest\", \"fetal\", \"fetch\", \"fete\", \"fetid\", \"fetus\", \"feud\", \"fever\", \"few\", \"fff\", \"ffff\", \"fgh\", \"fiat\", \"fib\", \"fibrin\", \"fiche\", \"fide\", \"fief\", \"field\", \"fiend\", \"fiery\", \"fife\", \"fifo\", \"fifth\", \"fifty\", \"fig\", \"fight\", \"filch\", \"file\", \"filet\", \"fill\", \"filler\", \"filly\", \"film\", \"filmy\", \"filth\", \"fin\", \"final\", \"finale\", \"finch\", \"find\", \"fine\", \"finite\", \"fink\", \"finn\", \"finny\", \"fir\", \"fire\", \"firm\", \"first\", \"fish\", \"fishy\", \"fisk\", \"fiske\", \"fist\", \"fit\", \"fitch\", \"five\", \"fix\", \"fjord\", \"flack\", \"flag\", \"flail\", \"flair\", \"flak\", \"flake\", \"flaky\", \"flam\", \"flame\", \"flank\", \"flap\", \"flare\", \"flash\", \"flask\", \"flat\", \"flatus\", \"flaw\", \"flax\", \"flea\", \"fleck\", \"fled\", \"flee\", \"fleet\", \"flesh\", \"flew\", \"flex\", \"flick\", \"flier\", \"flinch\", \"fling\", \"flint\", \"flip\", \"flirt\", \"flit\", \"flo\", \"float\", \"floc\", \"flock\", \"floe\", \"flog\", \"flood\", \"floor\", \"flop\", \"floppy\", \"flora\", \"flour\", \"flout\", \"flow\", \"flown\", \"floyd\", \"flu\", \"flub\", \"flue\", \"fluff\", \"fluid\", \"fluke\", \"flung\", \"flush\", \"flute\", \"flux\", \"fly\", \"flyer\", \"flynn\", \"fmc\", \"foal\", \"foam\", \"foamy\", \"fob\", \"focal\", \"foci\", \"focus\", \"fodder\", \"foe\", \"fog\", \"foggy\", \"fogy\", \"foil\", \"foist\", \"fold\", \"foley\", \"folio\", \"folk\", \"folly\", \"fond\", \"font\", \"food\", \"fool\", \"foot\", \"foote\", \"fop\", \"for\", \"foray\", \"force\", \"ford\", \"fore\", \"forge\", \"forgot\", \"fork\", \"form\", \"fort\", \"forte\", \"forth\", \"forty\", \"forum\", \"foss\", \"fossil\", \"foul\", \"found\", \"fount\", \"four\", \"fovea\", \"fowl\", \"fox\", \"foxy\", \"foyer\", \"fpc\", \"frail\", \"frame\", \"fran\", \"franc\", \"franca\", \"frank\", \"franz\", \"frau\", \"fraud\", \"fray\", \"freak\", \"fred\", \"free\", \"freed\", \"freer\", \"frenzy\", \"freon\", \"fresh\", \"fret\", \"freud\", \"frey\", \"freya\", \"friar\", \"frick\", \"fried\", \"frill\", \"frilly\", \"frisky\", \"fritz\", \"fro\", \"frock\", \"frog\", \"from\", \"front\", \"frost\", \"froth\", \"frown\", \"froze\", \"fruit\", \"fry\", \"frye\", \"ftc\", \"fuchs\", \"fudge\", \"fuel\", \"fugal\", \"fugue\", \"fuji\", \"full\", \"fully\", \"fum\", \"fume\", \"fun\", \"fund\", \"fungal\", \"fungi\", \"funk\", \"funny\", \"fur\", \"furl\", \"furry\", \"fury\", \"furze\", \"fuse\", \"fuss\", \"fussy\", \"fusty\", \"fuzz\", \"fuzzy\", \"gab\", \"gable\", \"gabon\", \"gad\", \"gadget\", \"gaff\", \"gaffe\", \"gag\", \"gage\", \"gail\", \"gain\", \"gait\", \"gal\", \"gala\", \"galaxy\", \"gale\", \"galen\", \"gall\", \"gallop\", \"galt\", \"gam\", \"game\", \"gamin\", \"gamma\", \"gamut\", \"gander\", \"gang\", \"gao\", \"gap\", \"gape\", \"gar\", \"garb\", \"garish\", \"garner\", \"garry\", \"garth\", \"gary\", \"gas\", \"gash\", \"gasp\", \"gassy\", \"gate\", \"gates\", \"gator\", \"gauche\", \"gaudy\", \"gauge\", \"gaul\", \"gaunt\", \"gaur\", \"gauss\", \"gauze\", \"gave\", \"gavel\", \"gavin\", \"gawk\", \"gawky\", \"gay\", \"gaze\", \"gear\", \"gecko\", \"gee\", \"geese\", \"geigy\", \"gel\", \"geld\", \"gem\", \"gemma\", \"gene\", \"genie\", \"genii\", \"genoa\", \"genre\", \"gent\", \"gentry\", \"genus\", \"gerbil\", \"germ\", \"gerry\", \"get\", \"getty\", \"ggg\", \"gggg\", \"ghana\", \"ghent\", \"ghetto\", \"ghi\", \"ghost\", \"ghoul\", \"giant\", \"gibbs\", \"gibby\", \"gibe\", \"giddy\", \"gift\", \"gig\", \"gil\", \"gila\", \"gild\", \"giles\", \"gill\", \"gilt\", \"gimbal\", \"gimpy\", \"gin\", \"gina\", \"ginn\", \"gino\", \"gird\", \"girl\", \"girth\", \"gist\", \"give\", \"given\", \"glad\", \"gladdy\", \"glade\", \"glamor\", \"gland\", \"glans\", \"glare\", \"glass\", \"glaze\", \"gleam\", \"glean\", \"glee\", \"glen\", \"glenn\", \"glib\", \"glide\", \"glint\", \"gloat\", \"glob\", \"globe\", \"glom\", \"gloom\", \"glory\", \"gloss\", \"glove\", \"glow\", \"glue\", \"glued\", \"gluey\", \"gluing\", \"glum\", \"glut\", \"glyph\", \"gmt\", \"gnarl\", \"gnash\", \"gnat\", \"gnaw\", \"gnome\", \"gnp\", \"gnu\", \"goa\", \"goad\", \"goal\", \"goat\", \"gob\", \"goer\", \"goes\", \"goff\", \"gog\", \"goggle\", \"gogh\", \"gogo\", \"gold\", \"golf\", \"golly\", \"gone\", \"gong\", \"goo\", \"good\", \"goode\", \"goody\", \"goof\", \"goofy\", \"goose\", \"gop\", \"gordon\", \"gore\", \"goren\", \"gorge\", \"gorky\", \"gorse\", \"gory\", \"gosh\", \"gospel\", \"got\", \"gouda\", \"gouge\", \"gould\", \"gourd\", \"gout\", \"gown\", \"gpo\", \"grab\", \"grace\", \"grad\", \"grade\", \"grady\", \"graff\", \"graft\", \"grail\", \"grain\", \"grand\", \"grant\", \"grape\", \"graph\", \"grasp\", \"grass\", \"grata\", \"grate\", \"grater\", \"grave\", \"gravy\", \"gray\", \"graze\", \"great\", \"grebe\", \"greed\", \"greedy\", \"greek\", \"green\", \"greer\", \"greet\", \"greg\", \"gregg\", \"greta\", \"grew\", \"grey\", \"grid\", \"grief\", \"grieve\", \"grill\", \"grim\", \"grime\", \"grimm\", \"grin\", \"grind\", \"grip\", \"gripe\", \"grist\", \"grit\", \"groan\", \"groat\", \"groin\", \"groom\", \"grope\", \"gross\", \"groton\", \"group\", \"grout\", \"grove\", \"grow\", \"growl\", \"grown\", \"grub\", \"gruff\", \"grunt\", \"gsa\", \"guam\", \"guano\", \"guard\", \"guess\", \"guest\", \"guide\", \"guild\", \"guile\", \"guilt\", \"guise\", \"guitar\", \"gules\", \"gulf\", \"gull\", \"gully\", \"gulp\", \"gum\", \"gumbo\", \"gummy\", \"gun\", \"gunk\", \"gunky\", \"gunny\", \"gurgle\", \"guru\", \"gus\", \"gush\", \"gust\", \"gusto\", \"gusty\", \"gut\", \"gutsy\", \"guy\", \"guyana\", \"gwen\", \"gwyn\", \"gym\", \"gyp\", \"gypsy\", \"gyro\", \"haag\", \"haas\", \"habib\", \"habit\", \"hack\", \"had\", \"hades\", \"hadron\", \"hagen\", \"hager\", \"hague\", \"hahn\", \"haifa\", \"haiku\", \"hail\", \"hair\", \"hairy\", \"haiti\", \"hal\", \"hale\", \"haley\", \"half\", \"hall\", \"halma\", \"halo\", \"halt\", \"halvah\", \"halve\", \"ham\", \"hamal\", \"hamlin\", \"han\", \"hand\", \"handy\", \"haney\", \"hang\", \"hank\", \"hanna\", \"hanoi\", \"hans\", \"hansel\", \"hap\", \"happy\", \"hard\", \"hardy\", \"hare\", \"harem\", \"hark\", \"harley\", \"harm\", \"harp\", \"harpy\", \"harry\", \"harsh\", \"hart\", \"harvey\", \"hash\", \"hasp\", \"hast\", \"haste\", \"hasty\", \"hat\", \"hatch\", \"hate\", \"hater\", \"hath\", \"hatred\", \"haul\", \"haunt\", \"have\", \"haven\", \"havoc\", \"haw\", \"hawk\", \"hay\", \"haydn\", \"hayes\", \"hays\", \"hazard\", \"haze\", \"hazel\", \"hazy\", \"head\", \"heady\", \"heal\", \"healy\", \"heap\", \"hear\", \"heard\", \"heart\", \"heat\", \"heath\", \"heave\", \"heavy\", \"hebe\", \"hebrew\", \"heck\", \"heckle\", \"hedge\", \"heed\", \"heel\", \"heft\", \"hefty\", \"heigh\", \"heine\", \"heinz\", \"heir\", \"held\", \"helen\", \"helga\", \"helix\", \"hell\", \"hello\", \"helm\", \"helmut\", \"help\", \"hem\", \"hemp\", \"hen\", \"hence\", \"henri\", \"henry\", \"her\", \"hera\", \"herb\", \"herd\", \"here\", \"hero\", \"heroic\", \"heron\", \"herr\", \"hertz\", \"hess\", \"hesse\", \"hettie\", \"hetty\", \"hew\", \"hewitt\", \"hewn\", \"hex\", \"hey\", \"hhh\", \"hhhh\", \"hiatt\", \"hick\", \"hicks\", \"hid\", \"hide\", \"high\", \"hij\", \"hike\", \"hill\", \"hilly\", \"hilt\", \"hilum\", \"him\", \"hind\", \"hindu\", \"hines\", \"hinge\", \"hint\", \"hip\", \"hippo\", \"hippy\", \"hiram\", \"hire\", \"hirsch\", \"his\", \"hiss\", \"hit\", \"hitch\", \"hive\", \"hoagy\", \"hoar\", \"hoard\", \"hob\", \"hobbs\", \"hobby\", \"hobo\", \"hoc\", \"hock\", \"hodge\", \"hodges\", \"hoe\", \"hoff\", \"hog\", \"hogan\", \"hoi\", \"hokan\", \"hold\", \"holdup\", \"hole\", \"holly\", \"holm\", \"holst\", \"holt\", \"home\", \"homo\", \"honda\", \"hondo\", \"hone\", \"honey\", \"hong\", \"honk\", \"hooch\", \"hood\", \"hoof\", \"hook\", \"hookup\", \"hoop\", \"hoot\", \"hop\", \"hope\", \"horde\", \"horn\", \"horny\", \"horse\", \"horus\", \"hose\", \"host\", \"hot\", \"hotbox\", \"hotel\", \"hough\", \"hound\", \"hour\", \"house\", \"hove\", \"hovel\", \"hover\", \"how\", \"howdy\", \"howe\", \"howl\", \"hoy\", \"hoyt\", \"hub\", \"hubbub\", \"hubby\", \"huber\", \"huck\", \"hue\", \"hued\", \"huff\", \"hug\", \"huge\", \"hugh\", \"hughes\", \"hugo\", \"huh\", \"hulk\", \"hull\", \"hum\", \"human\", \"humid\", \"hump\", \"humus\", \"hun\", \"hunch\", \"hung\", \"hunk\", \"hunt\", \"hurd\", \"hurl\", \"huron\", \"hurrah\", \"hurry\", \"hurst\", \"hurt\", \"hurty\", \"hush\", \"husky\", \"hut\", \"hutch\", \"hyde\", \"hydra\", \"hydro\", \"hyena\", \"hying\", \"hyman\", \"hymen\", \"hymn\", \"hymnal\", \"iambic\", \"ian\", \"ibex\", \"ibid\", \"ibis\", \"ibm\", \"ibn\", \"icc\", \"ice\", \"icing\", \"icky\", \"icon\", \"icy\", \"ida\", \"idaho\", \"idea\", \"ideal\", \"idiom\", \"idiot\", \"idle\", \"idol\", \"idyll\", \"ieee\", \"iffy\", \"ifni\", \"igloo\", \"igor\", \"iii\", \"iiii\", \"ijk\", \"ike\", \"ileum\", \"iliac\", \"iliad\", \"ill\", \"illume\", \"ilona\", \"image\", \"imbue\", \"imp\", \"impel\", \"import\", \"impute\", \"inane\", \"inapt\", \"inc\", \"inca\", \"incest\", \"inch\", \"incur\", \"index\", \"india\", \"indies\", \"indy\", \"inept\", \"inert\", \"infect\", \"infer\", \"infima\", \"infix\", \"infra\", \"ingot\", \"inhere\", \"injun\", \"ink\", \"inlay\", \"inlet\", \"inman\", \"inn\", \"inner\", \"input\", \"insect\", \"inset\", \"insult\", \"intend\", \"inter\", \"into\", \"inure\", \"invoke\", \"ion\", \"ionic\", \"iota\", \"iowa\", \"ipso\", \"ira\", \"iran\", \"iraq\", \"irate\", \"ire\", \"irene\", \"iris\", \"irish\", \"irk\", \"irma\", \"iron\", \"irony\", \"irs\", \"irvin\", \"irwin\", \"isaac\", \"isabel\", \"ising\", \"isis\", \"islam\", \"island\", \"isle\", \"israel\", \"issue\", \"italy\", \"itch\", \"item\", \"ito\", \"itt\", \"ivan\", \"ive\", \"ivory\", \"ivy\", \"jab\", \"jack\", \"jacky\", \"jacm\", \"jacob\", \"jacobi\", \"jade\", \"jag\", \"jail\", \"jaime\", \"jake\", \"jam\", \"james\", \"jan\", \"jane\", \"janet\", \"janos\", \"janus\", \"japan\", \"jar\", \"jason\", \"java\", \"jaw\", \"jay\", \"jazz\", \"jazzy\", \"jean\", \"jed\", \"jeep\", \"jeff\", \"jejune\", \"jelly\", \"jenny\", \"jeres\", \"jerk\", \"jerky\", \"jerry\", \"jersey\", \"jess\", \"jesse\", \"jest\", \"jesus\", \"jet\", \"jew\", \"jewel\", \"jewett\", \"jewish\", \"jibe\", \"jiffy\", \"jig\", \"jill\", \"jilt\", \"jim\", \"jimmy\", \"jinx\", \"jive\", \"jjj\", \"jjjj\", \"jkl\", \"joan\", \"job\", \"jock\", \"jockey\", \"joe\", \"joel\", \"joey\", \"jog\", \"john\", \"johns\", \"join\", \"joint\", \"joke\", \"jolla\", \"jolly\", \"jolt\", \"jon\", \"jonas\", \"jones\", \"jorge\", \"jose\", \"josef\", \"joshua\", \"joss\", \"jostle\", \"jot\", \"joule\", \"joust\", \"jove\", \"jowl\", \"jowly\", \"joy\", \"joyce\", \"juan\", \"judas\", \"judd\", \"jude\", \"judge\", \"judo\", \"judy\", \"jug\", \"juggle\", \"juice\", \"juicy\", \"juju\", \"juke\", \"jukes\", \"julep\", \"jules\", \"julia\", \"julie\", \"julio\", \"july\", \"jumbo\", \"jump\", \"jumpy\", \"junco\", \"june\", \"junk\", \"junky\", \"juno\", \"junta\", \"jura\", \"jure\", \"juror\", \"jury\", \"just\", \"jut\", \"jute\", \"kabul\", \"kafka\", \"kahn\", \"kajar\", \"kale\", \"kalmia\", \"kane\", \"kant\", \"kapok\", \"kappa\", \"karate\", \"karen\", \"karl\", \"karma\", \"karol\", \"karp\", \"kate\", \"kathy\", \"katie\", \"katz\", \"kava\", \"kay\", \"kayo\", \"kazoo\", \"keats\", \"keel\", \"keen\", \"keep\", \"keg\", \"keith\", \"keller\", \"kelly\", \"kelp\", \"kemp\", \"ken\", \"keno\", \"kent\", \"kenya\", \"kepler\", \"kept\", \"kern\", \"kerr\", \"kerry\", \"ketch\", \"kevin\", \"key\", \"keyed\", \"keyes\", \"keys\", \"khaki\", \"khan\", \"khmer\", \"kick\", \"kid\", \"kidde\", \"kidney\", \"kiev\", \"kigali\", \"kill\", \"kim\", \"kin\", \"kind\", \"king\", \"kink\", \"kinky\", \"kiosk\", \"kiowa\", \"kirby\", \"kirk\", \"kirov\", \"kiss\", \"kit\", \"kite\", \"kitty\", \"kiva\", \"kivu\", \"kiwi\", \"kkk\", \"kkkk\", \"klan\", \"klaus\", \"klein\", \"kline\", \"klm\", \"klux\", \"knack\", \"knapp\", \"knauer\", \"knead\", \"knee\", \"kneel\", \"knelt\", \"knew\", \"knick\", \"knife\", \"knit\", \"knob\", \"knock\", \"knoll\", \"knot\", \"knott\", \"know\", \"known\", \"knox\", \"knurl\", \"koala\", \"koch\", \"kodak\", \"kola\", \"kombu\", \"kong\", \"koran\", \"korea\", \"kraft\", \"krause\", \"kraut\", \"krebs\", \"kruse\", \"kudo\", \"kudzu\", \"kuhn\", \"kulak\", \"kurd\", \"kurt\", \"kyle\", \"kyoto\", \"lab\", \"laban\", \"label\", \"labia\", \"labile\", \"lac\", \"lace\", \"lack\", \"lacy\", \"lad\", \"laden\", \"ladle\", \"lady\", \"lag\", \"lager\", \"lagoon\", \"lagos\", \"laid\", \"lain\", \"lair\", \"laity\", \"lake\", \"lam\", \"lamar\", \"lamb\", \"lame\", \"lamp\", \"lana\", \"lance\", \"land\", \"lane\", \"lang\", \"lange\", \"lanka\", \"lanky\", \"lao\", \"laos\", \"lap\", \"lapel\", \"lapse\", \"larch\", \"lard\", \"lares\", \"large\", \"lark\", \"larkin\", \"larry\", \"lars\", \"larva\", \"lase\", \"lash\", \"lass\", \"lasso\", \"last\", \"latch\", \"late\", \"later\", \"latest\", \"latex\", \"lath\", \"lathe\", \"latin\", \"latus\", \"laud\", \"laue\", \"laugh\", \"launch\", \"laura\", \"lava\", \"law\", \"lawn\", \"lawson\", \"lax\", \"lay\", \"layup\", \"laze\", \"lazy\", \"lea\", \"leach\", \"lead\", \"leaf\", \"leafy\", \"leak\", \"leaky\", \"lean\", \"leap\", \"leapt\", \"lear\", \"learn\", \"lease\", \"leash\", \"least\", \"leave\", \"led\", \"ledge\", \"lee\", \"leech\", \"leeds\", \"leek\", \"leer\", \"leery\", \"leeway\", \"left\", \"lefty\", \"leg\", \"legal\", \"leggy\", \"legion\", \"leigh\", \"leila\", \"leland\", \"lemma\", \"lemon\", \"len\", \"lena\", \"lend\", \"lenin\", \"lenny\", \"lens\", \"lent\", \"leo\", \"leon\", \"leona\", \"leone\", \"leper\", \"leroy\", \"less\", \"lessee\", \"lest\", \"let\", \"lethe\", \"lev\", \"levee\", \"level\", \"lever\", \"levi\", \"levin\", \"levis\", \"levy\", \"lew\", \"lewd\", \"lewis\", \"leyden\", \"liar\", \"libel\", \"libido\", \"libya\", \"lice\", \"lick\", \"lid\", \"lie\", \"lied\", \"lien\", \"lieu\", \"life\", \"lifo\", \"lift\", \"light\", \"like\", \"liken\", \"lila\", \"lilac\", \"lilly\", \"lilt\", \"lily\", \"lima\", \"limb\", \"limbo\", \"lime\", \"limit\", \"limp\", \"lin\", \"lind\", \"linda\", \"linden\", \"line\", \"linen\", \"lingo\", \"link\", \"lint\", \"linus\", \"lion\", \"lip\", \"lipid\", \"lisa\", \"lise\", \"lisle\", \"lisp\", \"list\", \"listen\", \"lit\", \"lithe\", \"litton\", \"live\", \"liven\", \"livid\", \"livre\", \"liz\", \"lizzie\", \"lll\", \"llll\", \"lloyd\", \"lmn\", \"load\", \"loaf\", \"loam\", \"loamy\", \"loan\", \"loath\", \"lob\", \"lobar\", \"lobby\", \"lobe\", \"lobo\", \"local\", \"loci\", \"lock\", \"locke\", \"locus\", \"lodge\", \"loeb\", \"loess\", \"loft\", \"lofty\", \"log\", \"logan\", \"loge\", \"logic\", \"loin\", \"loire\", \"lois\", \"loiter\", \"loki\", \"lola\", \"loll\", \"lolly\", \"lomb\", \"lome\", \"lone\", \"long\", \"look\", \"loom\", \"loon\", \"loop\", \"loose\", \"loot\", \"lop\", \"lope\", \"lopez\", \"lord\", \"lore\", \"loren\", \"los\", \"lose\", \"loss\", \"lossy\", \"lost\", \"lot\", \"lotte\", \"lotus\", \"lou\", \"loud\", \"louis\", \"louise\", \"louse\", \"lousy\", \"louver\", \"love\", \"low\", \"lowe\", \"lower\", \"lowry\", \"loy\", \"loyal\", \"lsi\", \"ltv\", \"lucas\", \"lucia\", \"lucid\", \"luck\", \"lucky\", \"lucre\", \"lucy\", \"lug\", \"luge\", \"luger\", \"luis\", \"luke\", \"lull\", \"lulu\", \"lumbar\", \"lumen\", \"lump\", \"lumpy\", \"lunar\", \"lunch\", \"lund\", \"lung\", \"lunge\", \"lura\", \"lurch\", \"lure\", \"lurid\", \"lurk\", \"lush\", \"lust\", \"lusty\", \"lute\", \"lutz\", \"lux\", \"luxe\", \"luzon\", \"lydia\", \"lye\", \"lying\", \"lykes\", \"lyle\", \"lyman\", \"lymph\", \"lynch\", \"lynn\", \"lynx\", \"lyon\", \"lyons\", \"lyra\", \"lyric\", \"mabel\", \"mac\", \"mace\", \"mach\", \"macho\", \"mack\", \"mackey\", \"macon\", \"macro\", \"mad\", \"madam\", \"made\", \"madman\", \"madsen\", \"mae\", \"magi\", \"magic\", \"magma\", \"magna\", \"magog\", \"maid\", \"maier\", \"mail\", \"maim\", \"main\", \"maine\", \"major\", \"make\", \"malady\", \"malay\", \"male\", \"mali\", \"mall\", \"malt\", \"malta\", \"mambo\", \"mamma\", \"mammal\", \"man\", \"mana\", \"manama\", \"mane\", \"mange\", \"mania\", \"manic\", \"mann\", \"manna\", \"manor\", \"mans\", \"manse\", \"mantle\", \"many\", \"mao\", \"maori\", \"map\", \"maple\", \"mar\", \"marc\", \"march\", \"marco\", \"marcy\", \"mardi\", \"mare\", \"margo\", \"maria\", \"marie\", \"marin\", \"marine\", \"mario\", \"mark\", \"marks\", \"marlin\", \"marrow\", \"marry\", \"mars\", \"marsh\", \"mart\", \"marty\", \"marx\", \"mary\", \"maser\", \"mash\", \"mask\", \"mason\", \"masque\", \"mass\", \"mast\", \"mat\", \"match\", \"mate\", \"mateo\", \"mater\", \"math\", \"matte\", \"maul\", \"mauve\", \"mavis\", \"maw\", \"mawr\", \"max\", \"maxim\", \"maxima\", \"may\", \"maya\", \"maybe\", \"mayer\", \"mayhem\", \"mayo\", \"mayor\", \"mayst\", \"mazda\", \"maze\", \"mba\", \"mccoy\", \"mcgee\", \"mckay\", \"mckee\", \"mcleod\", \"mead\", \"meal\", \"mealy\", \"mean\", \"meant\", \"meat\", \"meaty\", \"mecca\", \"mecum\", \"medal\", \"medea\", \"media\", \"medic\", \"medley\", \"meek\", \"meet\", \"meg\", \"mega\", \"meier\", \"meir\", \"mel\", \"meld\", \"melee\", \"mellow\", \"melon\", \"melt\", \"memo\", \"memoir\", \"men\", \"mend\", \"menlo\", \"menu\", \"merck\", \"mercy\", \"mere\", \"merge\", \"merit\", \"merle\", \"merry\", \"mesa\", \"mescal\", \"mesh\", \"meson\", \"mess\", \"messy\", \"met\", \"metal\", \"mete\", \"meter\", \"metro\", \"mew\", \"meyer\", \"meyers\", \"mezzo\", \"miami\", \"mica\", \"mice\", \"mickey\", \"micky\", \"micro\", \"mid\", \"midas\", \"midge\", \"midst\", \"mien\", \"miff\", \"mig\", \"might\", \"mike\", \"mila\", \"milan\", \"milch\", \"mild\", \"mildew\", \"mile\", \"miles\", \"milk\", \"milky\", \"mill\", \"mills\", \"milt\", \"mimi\", \"mimic\", \"mince\", \"mind\", \"mine\", \"mini\", \"minim\", \"mink\", \"minnow\", \"minor\", \"minos\", \"minot\", \"minsk\", \"mint\", \"minus\", \"mira\", \"mirage\", \"mire\", \"mirth\", \"miser\", \"misery\", \"miss\", \"missy\", \"mist\", \"misty\", \"mit\", \"mite\", \"mitre\", \"mitt\", \"mix\", \"mixup\", \"mizar\", \"mmm\", \"mmmm\", \"mno\", \"moan\", \"moat\", \"mob\", \"mobil\", \"mock\", \"modal\", \"mode\", \"model\", \"modem\", \"modish\", \"moe\", \"moen\", \"mohr\", \"moire\", \"moist\", \"molal\", \"molar\", \"mold\", \"mole\", \"moll\", \"mollie\", \"molly\", \"molt\", \"molten\", \"mommy\", \"mona\", \"monad\", \"mondo\", \"monel\", \"money\", \"monic\", \"monk\", \"mont\", \"monte\", \"month\", \"monty\", \"moo\", \"mood\", \"moody\", \"moon\", \"moor\", \"moore\", \"moose\", \"moot\", \"mop\", \"moral\", \"morale\", \"moran\", \"more\", \"morel\", \"morn\", \"moron\", \"morse\", \"morsel\", \"mort\", \"mosaic\", \"moser\", \"moses\", \"moss\", \"mossy\", \"most\", \"mot\", \"motel\", \"motet\", \"moth\", \"mother\", \"motif\", \"motor\", \"motto\", \"mould\", \"mound\", \"mount\", \"mourn\", \"mouse\", \"mousy\", \"mouth\", \"move\", \"movie\", \"mow\", \"moyer\", \"mph\", \"mrs\", \"much\", \"muck\", \"mucus\", \"mud\", \"mudd\", \"muddy\", \"muff\", \"muffin\", \"mug\", \"muggy\", \"mugho\", \"muir\", \"mulch\", \"mulct\", \"mule\", \"mull\", \"multi\", \"mum\", \"mummy\", \"munch\", \"mung\", \"munson\", \"muon\", \"muong\", \"mural\", \"muriel\", \"murk\", \"murky\", \"murre\", \"muse\", \"mush\", \"mushy\", \"music\", \"musk\", \"muslim\", \"must\", \"musty\", \"mute\", \"mutt\", \"muzak\", \"muzo\", \"myel\", \"myers\", \"mylar\", \"mynah\", \"myopia\", \"myra\", \"myron\", \"myrrh\", \"myself\", \"myth\", \"naacp\", \"nab\", \"nadir\", \"nag\", \"nagoya\", \"nagy\", \"naiad\", \"nail\", \"nair\", \"naive\", \"naked\", \"name\", \"nan\", \"nancy\", \"naomi\", \"nap\", \"nary\", \"nasa\", \"nasal\", \"nash\", \"nasty\", \"nat\", \"natal\", \"nate\", \"nato\", \"natty\", \"nature\", \"naval\", \"nave\", \"navel\", \"navy\", \"nay\", \"nazi\", \"nbc\", \"nbs\", \"ncaa\", \"ncr\", \"neal\", \"near\", \"neat\", \"neath\", \"neck\", \"ned\", \"nee\", \"need\", \"needy\", \"neff\", \"negate\", \"negro\", \"nehru\", \"neil\", \"nell\", \"nelsen\", \"neon\", \"nepal\", \"nero\", \"nerve\", \"ness\", \"nest\", \"net\", \"neuron\", \"neva\", \"neve\", \"new\", \"newel\", \"newt\", \"next\", \"nib\", \"nibs\", \"nice\", \"nicety\", \"niche\", \"nick\", \"niece\", \"nigh\", \"night\", \"nih\", \"nikko\", \"nil\", \"nile\", \"nimbus\", \"nimh\", \"nina\", \"nine\", \"ninth\", \"niobe\", \"nip\", \"nit\", \"nitric\", \"nitty\", \"nixon\", \"nnn\", \"nnnn\", \"noaa\", \"noah\", \"nob\", \"nobel\", \"noble\", \"nod\", \"nodal\", \"node\", \"noel\", \"noise\", \"noisy\", \"nolan\", \"noll\", \"nolo\", \"nomad\", \"non\", \"nonce\", \"none\", \"nook\", \"noon\", \"noose\", \"nop\", \"nor\", \"nora\", \"norm\", \"norma\", \"north\", \"norway\", \"nose\", \"not\", \"notch\", \"note\", \"notre\", \"noun\", \"nov\", \"nova\", \"novak\", \"novel\", \"novo\", \"now\", \"nrc\", \"nsf\", \"ntis\", \"nuance\", \"nubia\", \"nuclei\", \"nude\", \"nudge\", \"null\", \"numb\", \"nun\", \"nurse\", \"nut\", \"nyc\", \"nylon\", \"nymph\", \"nyu\", \"oaf\", \"oak\", \"oaken\", \"oakley\", \"oar\", \"oases\", \"oasis\", \"oat\", \"oath\", \"obese\", \"obey\", \"objet\", \"oboe\", \"occur\", \"ocean\", \"oct\", \"octal\", \"octave\", \"octet\", \"odd\", \"ode\", \"odin\", \"odium\", \"off\", \"offal\", \"offend\", \"offer\", \"oft\", \"often\", \"ogden\", \"ogle\", \"ogre\", \"ohio\", \"ohm\", \"ohmic\", \"oil\", \"oily\", \"oint\", \"okay\", \"olaf\", \"olav\", \"old\", \"olden\", \"oldy\", \"olga\", \"olin\", \"olive\", \"olsen\", \"olson\", \"omaha\", \"oman\", \"omega\", \"omen\", \"omit\", \"once\", \"one\", \"onion\", \"only\", \"onset\", \"onto\", \"onus\", \"onward\", \"onyx\", \"ooo\", \"oooo\", \"ooze\", \"opal\", \"opec\", \"opel\", \"open\", \"opera\", \"opium\", \"opt\", \"optic\", \"opus\", \"oral\", \"orate\", \"orb\", \"orbit\", \"orchid\", \"ordain\", \"order\", \"ore\", \"organ\", \"orgy\", \"orin\", \"orion\", \"ornery\", \"orono\", \"orr\", \"osaka\", \"oscar\", \"osier\", \"oslo\", \"other\", \"otis\", \"ott\", \"otter\", \"otto\", \"ouch\", \"ought\", \"ounce\", \"our\", \"oust\", \"out\", \"ouvre\", \"ouzel\", \"ouzo\", \"ova\", \"oval\", \"ovary\", \"ovate\", \"oven\", \"over\", \"overt\", \"ovid\", \"owe\", \"owens\", \"owing\", \"owl\", \"owly\", \"own\", \"oxen\", \"oxeye\", \"oxide\", \"oxnard\", \"ozark\", \"ozone\", \"pablo\", \"pabst\", \"pace\", \"pack\", \"packet\", \"pact\", \"pad\", \"paddy\", \"padre\", \"paean\", \"pagan\", \"page\", \"paid\", \"pail\", \"pain\", \"paine\", \"paint\", \"pair\", \"pal\", \"pale\", \"pall\", \"palm\", \"palo\", \"palsy\", \"pam\", \"pampa\", \"pan\", \"panama\", \"panda\", \"pane\", \"panel\", \"pang\", \"panic\", \"pansy\", \"pant\", \"panty\", \"paoli\", \"pap\", \"papa\", \"papal\", \"papaw\", \"paper\", \"pappy\", \"papua\", \"par\", \"parch\", \"pardon\", \"pare\", \"pareto\", \"paris\", \"park\", \"parke\", \"parks\", \"parr\", \"parry\", \"parse\", \"part\", \"party\", \"pascal\", \"pasha\", \"paso\", \"pass\", \"passe\", \"past\", \"paste\", \"pasty\", \"pat\", \"patch\", \"pate\", \"pater\", \"path\", \"patio\", \"patsy\", \"patti\", \"patton\", \"patty\", \"paul\", \"paula\", \"pauli\", \"paulo\", \"pause\", \"pave\", \"paw\", \"pawn\", \"pax\", \"pay\", \"payday\", \"payne\", \"paz\", \"pbs\", \"pea\", \"peace\", \"peach\", \"peak\", \"peaky\", \"peal\", \"peale\", \"pear\", \"pearl\", \"pease\", \"peat\", \"pebble\", \"pecan\", \"peck\", \"pecos\", \"pedal\", \"pedro\", \"pee\", \"peed\", \"peek\", \"peel\", \"peep\", \"peepy\", \"peer\", \"peg\", \"peggy\", \"pelt\", \"pen\", \"penal\", \"pence\", \"pencil\", \"pend\", \"penh\", \"penn\", \"penna\", \"penny\", \"pent\", \"peony\", \"pep\", \"peppy\", \"pepsi\", \"per\", \"perch\", \"percy\", \"perez\", \"peril\", \"perk\", \"perky\", \"perle\", \"perry\", \"persia\", \"pert\", \"perth\", \"peru\", \"peruse\", \"pest\", \"peste\", \"pet\", \"petal\", \"pete\", \"peter\", \"petit\", \"petri\", \"petty\", \"pew\", \"pewee\", \"phage\", \"phase\", \"phd\", \"phenol\", \"phi\", \"phil\", \"phlox\", \"phon\", \"phone\", \"phony\", \"photo\", \"phyla\", \"physic\", \"piano\", \"pica\", \"pick\", \"pickup\", \"picky\", \"pie\", \"piece\", \"pier\", \"pierce\", \"piety\", \"pig\", \"piggy\", \"pike\", \"pile\", \"pill\", \"pilot\", \"pimp\", \"pin\", \"pinch\", \"pine\", \"ping\", \"pinion\", \"pink\", \"pint\", \"pinto\", \"pion\", \"piotr\", \"pious\", \"pip\", \"pipe\", \"piper\", \"pique\", \"pit\", \"pitch\", \"pith\", \"pithy\", \"pitney\", \"pitt\", \"pity\", \"pius\", \"pivot\", \"pixel\", \"pixy\", \"pizza\", \"place\", \"plague\", \"plaid\", \"plain\", \"plan\", \"plane\", \"plank\", \"plant\", \"plasm\", \"plat\", \"plate\", \"plato\", \"play\", \"playa\", \"plaza\", \"plea\", \"plead\", \"pleat\", \"pledge\", \"pliny\", \"plod\", \"plop\", \"plot\", \"plow\", \"pluck\", \"plug\", \"plum\", \"plumb\", \"plume\", \"plump\", \"plunk\", \"plus\", \"plush\", \"plushy\", \"pluto\", \"ply\", \"poach\", \"pobox\", \"pod\", \"podge\", \"podia\", \"poe\", \"poem\", \"poesy\", \"poet\", \"poetry\", \"pogo\", \"poi\", \"point\", \"poise\", \"poke\", \"pol\", \"polar\", \"pole\", \"police\", \"polio\", \"polis\", \"polk\", \"polka\", \"poll\", \"polo\", \"pomona\", \"pomp\", \"ponce\", \"pond\", \"pong\", \"pont\", \"pony\", \"pooch\", \"pooh\", \"pool\", \"poole\", \"poop\", \"poor\", \"pop\", \"pope\", \"poppy\", \"porch\", \"pore\", \"pork\", \"porous\", \"port\", \"porte\", \"portia\", \"porto\", \"pose\", \"posey\", \"posh\", \"posit\", \"posse\", \"post\", \"posy\", \"pot\", \"potts\", \"pouch\", \"pound\", \"pour\", \"pout\", \"pow\", \"powder\", \"power\", \"ppm\", \"ppp\", \"pppp\", \"pqr\", \"prado\", \"pram\", \"prank\", \"pratt\", \"pray\", \"preen\", \"prefix\", \"prep\", \"press\", \"prexy\", \"prey\", \"priam\", \"price\", \"prick\", \"pride\", \"prig\", \"prim\", \"prima\", \"prime\", \"primp\", \"prince\", \"print\", \"prior\", \"prism\", \"prissy\", \"privy\", \"prize\", \"pro\", \"probe\", \"prod\", \"prof\", \"prom\", \"prone\", \"prong\", \"proof\", \"prop\", \"propyl\", \"prose\", \"proud\", \"prove\", \"prow\", \"prowl\", \"proxy\", \"prune\", \"pry\", \"psalm\", \"psi\", \"psych\", \"pta\", \"pub\", \"puck\", \"puddly\", \"puerto\", \"puff\", \"puffy\", \"pug\", \"pugh\", \"puke\", \"pull\", \"pulp\", \"pulse\", \"puma\", \"pump\", \"pun\", \"punch\", \"punic\", \"punish\", \"punk\", \"punky\", \"punt\", \"puny\", \"pup\", \"pupal\", \"pupil\", \"puppy\", \"pure\", \"purge\", \"purl\", \"purr\", \"purse\", \"pus\", \"pusan\", \"pusey\", \"push\", \"pussy\", \"put\", \"putt\", \"putty\", \"pvc\", \"pygmy\", \"pyle\", \"pyre\", \"pyrex\", \"pyrite\", \"qatar\", \"qed\", \"qqq\", \"qqqq\", \"qrs\", \"qua\", \"quack\", \"quad\", \"quaff\", \"quail\", \"quake\", \"qualm\", \"quark\", \"quarry\", \"quart\", \"quash\", \"quasi\", \"quay\", \"queasy\", \"queen\", \"queer\", \"quell\", \"query\", \"quest\", \"queue\", \"quick\", \"quid\", \"quiet\", \"quill\", \"quilt\", \"quinn\", \"quint\", \"quip\", \"quirk\", \"quirt\", \"quit\", \"quite\", \"quito\", \"quiz\", \"quo\", \"quod\", \"quota\", \"quote\", \"rabat\", \"rabbi\", \"rabbit\", \"rabid\", \"rabin\", \"race\", \"rack\", \"racy\", \"radar\", \"radii\", \"radio\", \"radium\", \"radix\", \"radon\", \"rae\", \"rafael\", \"raft\", \"rag\", \"rage\", \"raid\", \"rail\", \"rain\", \"rainy\", \"raise\", \"raj\", \"rajah\", \"rake\", \"rally\", \"ralph\", \"ram\", \"raman\", \"ramo\", \"ramp\", \"ramsey\", \"ran\", \"ranch\", \"rand\", \"randy\", \"rang\", \"range\", \"rangy\", \"rank\", \"rant\", \"raoul\", \"rap\", \"rape\", \"rapid\", \"rapt\", \"rare\", \"rasa\", \"rascal\", \"rash\", \"rasp\", \"rat\", \"rata\", \"rate\", \"rater\", \"ratio\", \"rattle\", \"raul\", \"rave\", \"ravel\", \"raven\", \"raw\", \"ray\", \"raze\", \"razor\", \"rca\", \"reach\", \"read\", \"ready\", \"reagan\", \"real\", \"realm\", \"ream\", \"reap\", \"rear\", \"reave\", \"reb\", \"rebel\", \"rebut\", \"recipe\", \"reck\", \"recur\", \"red\", \"redeem\", \"reduce\", \"reed\", \"reedy\", \"reef\", \"reek\", \"reel\", \"reese\", \"reeve\", \"refer\", \"regal\", \"regina\", \"regis\", \"reich\", \"reid\", \"reign\", \"rein\", \"relax\", \"relay\", \"relic\", \"reman\", \"remedy\", \"remit\", \"remus\", \"rena\", \"renal\", \"rend\", \"rene\", \"renown\", \"rent\", \"rep\", \"repel\", \"repent\", \"resin\", \"resort\", \"rest\", \"ret\", \"retch\", \"return\", \"reub\", \"rev\", \"reveal\", \"revel\", \"rever\", \"revet\", \"revved\", \"rex\", \"rhea\", \"rheum\", \"rhine\", \"rhino\", \"rho\", \"rhoda\", \"rhode\", \"rhyme\", \"rib\", \"rica\", \"rice\", \"rich\", \"rick\", \"rico\", \"rid\", \"ride\", \"ridge\", \"rifle\", \"rift\", \"rig\", \"riga\", \"rigel\", \"riggs\", \"right\", \"rigid\", \"riley\", \"rill\", \"rilly\", \"rim\", \"rime\", \"rimy\", \"ring\", \"rink\", \"rinse\", \"rio\", \"riot\", \"rip\", \"ripe\", \"ripen\", \"ripley\", \"rise\", \"risen\", \"risk\", \"risky\", \"rite\", \"ritz\", \"rival\", \"riven\", \"river\", \"rivet\", \"riyadh\", \"roach\", \"road\", \"roam\", \"roar\", \"roast\", \"rob\", \"robe\", \"robin\", \"robot\", \"rock\", \"rocket\", \"rocky\", \"rod\", \"rode\", \"rodeo\", \"roe\", \"roger\", \"rogue\", \"roil\", \"role\", \"roll\", \"roman\", \"rome\", \"romeo\", \"romp\", \"ron\", \"rondo\", \"rood\", \"roof\", \"rook\", \"rookie\", \"rooky\", \"room\", \"roomy\", \"roost\", \"root\", \"rope\", \"rosa\", \"rose\", \"rosen\", \"ross\", \"rosy\", \"rot\", \"rotc\", \"roth\", \"rotor\", \"rouge\", \"rough\", \"round\", \"rouse\", \"rout\", \"route\", \"rove\", \"row\", \"rowdy\", \"rowe\", \"roy\", \"royal\", \"royce\", \"rpm\", \"rrr\", \"rrrr\", \"rst\", \"rsvp\", \"ruanda\", \"rub\", \"rube\", \"ruben\", \"rubin\", \"rubric\", \"ruby\", \"ruddy\", \"rude\", \"rudy\", \"rue\", \"rufus\", \"rug\", \"ruin\", \"rule\", \"rum\", \"rumen\", \"rummy\", \"rump\", \"rumpus\", \"run\", \"rune\", \"rung\", \"runge\", \"runic\", \"runt\", \"runty\", \"rupee\", \"rural\", \"ruse\", \"rush\", \"rusk\", \"russ\", \"russo\", \"rust\", \"rusty\", \"rut\", \"ruth\", \"rutty\", \"ryan\", \"ryder\", \"rye\", \"sabine\", \"sable\", \"sabra\", \"sac\", \"sachs\", \"sack\", \"sad\", \"saddle\", \"sadie\", \"safari\", \"safe\", \"sag\", \"saga\", \"sage\", \"sago\", \"said\", \"sail\", \"saint\", \"sake\", \"sal\", \"salad\", \"sale\", \"salem\", \"saline\", \"salk\", \"salle\", \"sally\", \"salon\", \"salt\", \"salty\", \"salve\", \"salvo\", \"sam\", \"samba\", \"same\", \"sammy\", \"samoa\", \"samuel\", \"san\", \"sana\", \"sand\", \"sandal\", \"sandy\", \"sane\", \"sang\", \"sank\", \"sans\", \"santa\", \"santo\", \"sao\", \"sap\", \"sappy\", \"sara\", \"sarah\", \"saran\", \"sari\", \"sash\", \"sat\", \"satan\", \"satin\", \"satyr\", \"sauce\", \"saucy\", \"saud\", \"saudi\", \"saul\", \"sault\", \"saute\", \"save\", \"savoy\", \"savvy\", \"saw\", \"sawyer\", \"sax\", \"saxon\", \"say\", \"scab\", \"scala\", \"scald\", \"scale\", \"scalp\", \"scam\", \"scamp\", \"scan\", \"scant\", \"scar\", \"scare\", \"scarf\", \"scary\", \"scat\", \"scaup\", \"scene\", \"scent\", \"school\", \"scion\", \"scm\", \"scoff\", \"scold\", \"scoop\", \"scoot\", \"scope\", \"scops\", \"score\", \"scoria\", \"scorn\", \"scot\", \"scott\", \"scour\", \"scout\", \"scowl\", \"scram\", \"scrap\", \"scrape\", \"screw\", \"scrim\", \"scrub\", \"scuba\", \"scud\", \"scuff\", \"scull\", \"scum\", \"scurry\", \"sea\", \"seal\", \"seam\", \"seamy\", \"sean\", \"sear\", \"sears\", \"season\", \"seat\", \"sec\", \"secant\", \"sect\", \"sedan\", \"seder\", \"sedge\", \"see\", \"seed\", \"seedy\", \"seek\", \"seem\", \"seen\", \"seep\", \"seethe\", \"seize\", \"self\", \"sell\", \"selma\", \"semi\", \"sen\", \"send\", \"seneca\", \"senor\", \"sense\", \"sent\", \"sentry\", \"seoul\", \"sepal\", \"sepia\", \"sepoy\", \"sept\", \"septa\", \"sequin\", \"sera\", \"serf\", \"serge\", \"serif\", \"serum\", \"serve\", \"servo\", \"set\", \"seth\", \"seton\", \"setup\", \"seven\", \"sever\", \"severe\", \"sew\", \"sewn\", \"sex\", \"sexy\", \"shack\", \"shad\", \"shade\", \"shady\", \"shafer\", \"shaft\", \"shag\", \"shah\", \"shake\", \"shaken\", \"shako\", \"shaky\", \"shale\", \"shall\", \"sham\", \"shame\", \"shank\", \"shape\", \"shard\", \"share\", \"shari\", \"shark\", \"sharp\", \"shave\", \"shaw\", \"shawl\", \"shay\", \"she\", \"shea\", \"sheaf\", \"shear\", \"sheath\", \"shed\", \"sheen\", \"sheep\", \"sheer\", \"sheet\", \"sheik\", \"shelf\", \"shell\", \"shied\", \"shift\", \"shill\", \"shim\", \"shin\", \"shine\", \"shinto\", \"shiny\", \"ship\", \"shire\", \"shirk\", \"shirt\", \"shish\", \"shiv\", \"shoal\", \"shock\", \"shod\", \"shoe\", \"shoji\", \"shone\", \"shoo\", \"shook\", \"shoot\", \"shop\", \"shore\", \"short\", \"shot\", \"shout\", \"shove\", \"show\", \"shown\", \"showy\", \"shrank\", \"shred\", \"shrew\", \"shrike\", \"shrub\", \"shrug\", \"shu\", \"shuck\", \"shun\", \"shunt\", \"shut\", \"shy\", \"sial\", \"siam\", \"sian\", \"sib\", \"sibley\", \"sibyl\", \"sic\", \"sick\", \"side\", \"sidle\", \"siege\", \"siena\", \"sieve\", \"sift\", \"sigh\", \"sight\", \"sigma\", \"sign\", \"signal\", \"signor\", \"silas\", \"silk\", \"silky\", \"sill\", \"silly\", \"silo\", \"silt\", \"silty\", \"sima\", \"simon\", \"simons\", \"sims\", \"sin\", \"sinai\", \"since\", \"sine\", \"sinew\", \"sing\", \"singe\", \"sinh\", \"sink\", \"sinus\", \"sioux\", \"sip\", \"sir\", \"sire\", \"siren\", \"sis\", \"sisal\", \"sit\", \"site\", \"situ\", \"situs\", \"siva\", \"six\", \"sixgun\", \"sixth\", \"sixty\", \"size\", \"skat\", \"skate\", \"skeet\", \"skew\", \"ski\", \"skid\", \"skied\", \"skiff\", \"skill\", \"skim\", \"skimp\", \"skimpy\", \"skin\", \"skip\", \"skirt\", \"skit\", \"skulk\", \"skull\", \"skunk\", \"sky\", \"skye\", \"slab\", \"slack\", \"slag\", \"slain\", \"slake\", \"slam\", \"slang\", \"slant\", \"slap\", \"slash\", \"slat\", \"slate\", \"slater\", \"slav\", \"slave\", \"slay\", \"sled\", \"sleek\", \"sleep\", \"sleet\", \"slept\", \"slew\", \"slice\", \"slick\", \"slid\", \"slide\", \"slim\", \"slime\", \"slimy\", \"sling\", \"slip\", \"slit\", \"sliver\", \"sloan\", \"slob\", \"sloe\", \"slog\", \"sloop\", \"slop\", \"slope\", \"slosh\", \"slot\", \"sloth\", \"slow\", \"slug\", \"sluice\", \"slum\", \"slump\", \"slung\", \"slur\", \"slurp\", \"sly\", \"smack\", \"small\", \"smart\", \"smash\", \"smear\", \"smell\", \"smelt\", \"smile\", \"smirk\", \"smith\", \"smithy\", \"smog\", \"smoke\", \"smoky\", \"smug\", \"smut\", \"snack\", \"snafu\", \"snag\", \"snail\", \"snake\", \"snap\", \"snare\", \"snark\", \"snarl\", \"snatch\", \"sneak\", \"sneer\", \"snell\", \"snick\", \"sniff\", \"snip\", \"snipe\", \"snob\", \"snook\", \"snoop\", \"snore\", \"snort\", \"snout\", \"snow\", \"snowy\", \"snub\", \"snuff\", \"snug\", \"soak\", \"soap\", \"soapy\", \"soar\", \"sob\", \"sober\", \"social\", \"sock\", \"sod\", \"soda\", \"sofa\", \"sofia\", \"soft\", \"soften\", \"soggy\", \"soil\", \"sol\", \"solar\", \"sold\", \"sole\", \"solemn\", \"solid\", \"solo\", \"solon\", \"solve\", \"soma\", \"somal\", \"some\", \"son\", \"sonar\", \"song\", \"sonic\", \"sonny\", \"sonora\", \"sony\", \"soon\", \"soot\", \"sooth\", \"sop\", \"sora\", \"sorb\", \"sore\", \"sorry\", \"sort\", \"sos\", \"sou\", \"sough\", \"soul\", \"sound\", \"soup\", \"sour\", \"source\", \"sousa\", \"south\", \"sow\", \"sown\", \"soy\", \"soya\", \"spa\", \"space\", \"spade\", \"spain\", \"span\", \"spar\", \"spare\", \"sparge\", \"spark\", \"spasm\", \"spat\", \"spate\", \"spawn\", \"spay\", \"speak\", \"spear\", \"spec\", \"speck\", \"sped\", \"speed\", \"spell\", \"spend\", \"spent\", \"sperm\", \"sperry\", \"spew\", \"spica\", \"spice\", \"spicy\", \"spike\", \"spiky\", \"spill\", \"spilt\", \"spin\", \"spine\", \"spiny\", \"spire\", \"spiro\", \"spit\", \"spite\", \"spitz\", \"splat\", \"splay\", \"spline\", \"split\", \"spoil\", \"spoke\", \"spoof\", \"spook\", \"spooky\", \"spool\", \"spoon\", \"spore\", \"sport\", \"spot\", \"spout\", \"sprain\", \"spray\", \"spree\", \"sprig\", \"spruce\", \"sprue\", \"spud\", \"spume\", \"spun\", \"spunk\", \"spur\", \"spurn\", \"spurt\", \"spy\", \"squad\", \"squat\", \"squaw\", \"squibb\", \"squid\", \"squint\", \"sri\", \"sss\", \"ssss\", \"sst\", \"stab\", \"stack\", \"stacy\", \"staff\", \"stag\", \"stage\", \"stagy\", \"stahl\", \"staid\", \"stain\", \"stair\", \"stake\", \"stale\", \"stalk\", \"stall\", \"stamp\", \"stan\", \"stance\", \"stand\", \"stank\", \"staph\", \"star\", \"stare\", \"stark\", \"starr\", \"start\", \"stash\", \"state\", \"statue\", \"stave\", \"stay\", \"stead\", \"steak\", \"steal\", \"steam\", \"steed\", \"steel\", \"steele\", \"steen\", \"steep\", \"steer\", \"stein\", \"stella\", \"stem\", \"step\", \"stern\", \"steve\", \"stew\", \"stick\", \"stiff\", \"stile\", \"still\", \"stilt\", \"sting\", \"stingy\", \"stink\", \"stint\", \"stir\", \"stock\", \"stoic\", \"stoke\", \"stole\", \"stomp\", \"stone\", \"stony\", \"stood\", \"stool\", \"stoop\", \"stop\", \"store\", \"storey\", \"stork\", \"storm\", \"story\", \"stout\", \"stove\", \"stow\", \"strafe\", \"strap\", \"straw\", \"stray\", \"strewn\", \"strip\", \"stroll\", \"strom\", \"strop\", \"strum\", \"strut\", \"stu\", \"stuart\", \"stub\", \"stuck\", \"stud\", \"study\", \"stuff\", \"stuffy\", \"stump\", \"stun\", \"stung\", \"stunk\", \"stunt\", \"sturm\", \"style\", \"styli\", \"styx\", \"suave\", \"sub\", \"subtly\", \"such\", \"suck\", \"sud\", \"sudan\", \"suds\", \"sue\", \"suey\", \"suez\", \"sugar\", \"suit\", \"suite\", \"sulfa\", \"sulk\", \"sulky\", \"sully\", \"sultry\", \"sum\", \"sumac\", \"summon\", \"sun\", \"sung\", \"sunk\", \"sunny\", \"sunset\", \"suny\", \"sup\", \"super\", \"supra\", \"sure\", \"surf\", \"surge\", \"sus\", \"susan\", \"sushi\", \"susie\", \"sutton\", \"swab\", \"swag\", \"swain\", \"swam\", \"swami\", \"swamp\", \"swampy\", \"swan\", \"swank\", \"swap\", \"swarm\", \"swart\", \"swat\", \"swath\", \"sway\", \"swear\", \"sweat\", \"sweaty\", \"swede\", \"sweep\", \"sweet\", \"swell\", \"swelt\", \"swept\", \"swift\", \"swig\", \"swim\", \"swine\", \"swing\", \"swipe\", \"swirl\", \"swish\", \"swiss\", \"swoop\", \"sword\", \"swore\", \"sworn\", \"swum\", \"swung\", \"sybil\", \"sykes\", \"sylow\", \"sylvan\", \"synge\", \"synod\", \"syria\", \"syrup\", \"tab\", \"table\", \"taboo\", \"tabu\", \"tabula\", \"tacit\", \"tack\", \"tacky\", \"tacoma\", \"tact\", \"tad\", \"taffy\", \"taft\", \"tag\", \"tahoe\", \"tail\", \"taint\", \"take\", \"taken\", \"talc\", \"tale\", \"talk\", \"talky\", \"tall\", \"tallow\", \"tally\", \"talon\", \"talus\", \"tam\", \"tame\", \"tamp\", \"tampa\", \"tan\", \"tang\", \"tango\", \"tangy\", \"tanh\", \"tank\", \"tansy\", \"tanya\", \"tao\", \"taos\", \"tap\", \"tapa\", \"tape\", \"taper\", \"tapir\", \"tapis\", \"tappa\", \"tar\", \"tara\", \"tardy\", \"tariff\", \"tarry\", \"tart\", \"task\", \"tass\", \"taste\", \"tasty\", \"tat\", \"tate\", \"tater\", \"tattle\", \"tatty\", \"tau\", \"taunt\", \"taut\", \"tavern\", \"tawny\", \"tax\", \"taxi\", \"tea\", \"teach\", \"teal\", \"team\", \"tear\", \"tease\", \"teat\", \"tech\", \"tecum\", \"ted\", \"teddy\", \"tee\", \"teem\", \"teen\", \"teensy\", \"teet\", \"teeth\", \"telex\", \"tell\", \"tempo\", \"tempt\", \"ten\", \"tend\", \"tenet\", \"tenney\", \"tenon\", \"tenor\", \"tense\", \"tensor\", \"tent\", \"tenth\", \"tepee\", \"tepid\", \"term\", \"tern\", \"terra\", \"terre\", \"terry\", \"terse\", \"tess\", \"test\", \"testy\", \"tete\", \"texan\", \"texas\", \"text\", \"thai\", \"than\", \"thank\", \"that\", \"thaw\", \"the\", \"thea\", \"thee\", \"theft\", \"their\", \"them\", \"theme\", \"then\", \"there\", \"these\", \"theta\", \"they\", \"thick\", \"thief\", \"thigh\", \"thin\", \"thine\", \"thing\", \"think\", \"third\", \"this\", \"thong\", \"thor\", \"thorn\", \"thorny\", \"those\", \"thou\", \"thread\", \"three\", \"threw\", \"throb\", \"throes\", \"throw\", \"thrum\", \"thud\", \"thug\", \"thule\", \"thumb\", \"thump\", \"thus\", \"thy\", \"thyme\", \"tiber\", \"tibet\", \"tibia\", \"tic\", \"tick\", \"ticket\", \"tid\", \"tidal\", \"tidbit\", \"tide\", \"tidy\", \"tie\", \"tied\", \"tier\", \"tift\", \"tiger\", \"tight\", \"til\", \"tilde\", \"tile\", \"till\", \"tilt\", \"tilth\", \"tim\", \"time\", \"timex\", \"timid\", \"timon\", \"tin\", \"tina\", \"tine\", \"tinge\", \"tint\", \"tiny\", \"tioga\", \"tip\", \"tipoff\", \"tippy\", \"tipsy\", \"tire\", \"tit\", \"titan\", \"tithe\", \"title\", \"titus\", \"tnt\", \"toad\", \"toady\", \"toast\", \"toby\", \"today\", \"todd\", \"toe\", \"tofu\", \"tog\", \"togo\", \"togs\", \"toil\", \"toilet\", \"token\", \"tokyo\", \"told\", \"toll\", \"tom\", \"tomb\", \"tome\", \"tommy\", \"ton\", \"tonal\", \"tone\", \"tong\", \"toni\", \"tonic\", \"tonk\", \"tonsil\", \"tony\", \"too\", \"took\", \"tool\", \"toot\", \"tooth\", \"top\", \"topaz\", \"topic\", \"topple\", \"topsy\", \"tor\", \"torah\", \"torch\", \"tore\", \"tori\", \"torn\", \"torr\", \"torso\", \"tort\", \"torus\", \"tory\", \"toss\", \"tot\", \"total\", \"tote\", \"totem\", \"touch\", \"tough\", \"tour\", \"tout\", \"tow\", \"towel\", \"tower\", \"town\", \"toxic\", \"toxin\", \"toy\", \"trace\", \"track\", \"tract\", \"tracy\", \"trade\", \"trag\", \"trail\", \"train\", \"trait\", \"tram\", \"tramp\", \"trap\", \"trash\", \"trawl\", \"tray\", \"tread\", \"treat\", \"treble\", \"tree\", \"trek\", \"trench\", \"trend\", \"tress\", \"triad\", \"trial\", \"tribe\", \"trick\", \"tried\", \"trig\", \"trill\", \"trim\", \"trio\", \"trip\", \"tripe\", \"trite\", \"triton\", \"trod\", \"troll\", \"troop\", \"trot\", \"trout\", \"troy\", \"truce\", \"truck\", \"trudge\", \"trudy\", \"true\", \"truly\", \"trump\", \"trunk\", \"truss\", \"trust\", \"truth\", \"trw\", \"try\", \"tsar\", \"ttl\", \"ttt\", \"tttt\", \"tty\", \"tub\", \"tuba\", \"tube\", \"tuck\", \"tudor\", \"tuff\", \"tuft\", \"tug\", \"tulane\", \"tulip\", \"tulle\", \"tulsa\", \"tum\", \"tun\", \"tuna\", \"tune\", \"tung\", \"tunic\", \"tunis\", \"tunnel\", \"tuple\", \"turf\", \"turin\", \"turk\", \"turn\", \"turvy\", \"tusk\", \"tussle\", \"tutor\", \"tutu\", \"tuv\", \"tva\", \"twa\", \"twain\", \"tweak\", \"tweed\", \"twice\", \"twig\", \"twill\", \"twin\", \"twine\", \"twirl\", \"twist\", \"twisty\", \"twit\", \"two\", \"twx\", \"tyburn\", \"tying\", \"tyler\", \"type\", \"typic\", \"typo\", \"tyson\", \"ucla\", \"ugh\", \"ugly\", \"ulan\", \"ulcer\", \"ultra\", \"umber\", \"umbra\", \"umpire\", \"unary\", \"uncle\", \"under\", \"unify\", \"union\", \"unit\", \"unite\", \"unity\", \"unix\", \"until\", \"upend\", \"uphold\", \"upon\", \"upper\", \"uproar\", \"upset\", \"uptake\", \"upton\", \"urban\", \"urbane\", \"urea\", \"urge\", \"uri\", \"urine\", \"uris\", \"urn\", \"ursa\", \"usa\", \"usaf\", \"usage\", \"usc\", \"usda\", \"use\", \"useful\", \"usgs\", \"usher\", \"usia\", \"usn\", \"usps\", \"ussr\", \"usual\", \"usurp\", \"usury\", \"utah\", \"utica\", \"utile\", \"utmost\", \"utter\", \"uuu\", \"uuuu\", \"uvw\", \"vacua\", \"vacuo\", \"vade\", \"vaduz\", \"vague\", \"vail\", \"vain\", \"vale\", \"valet\", \"valeur\", \"valid\", \"value\", \"valve\", \"vamp\", \"van\", \"vance\", \"vane\", \"vary\", \"vase\", \"vast\", \"vat\", \"vault\", \"veal\", \"veda\", \"vee\", \"veer\", \"veery\", \"vega\", \"veil\", \"vein\", \"velar\", \"veldt\", \"vella\", \"vellum\", \"venal\", \"vend\", \"venial\", \"venom\", \"vent\", \"venus\", \"vera\", \"verb\", \"verde\", \"verdi\", \"verge\", \"verity\", \"verna\", \"verne\", \"versa\", \"verse\", \"verve\", \"very\", \"vessel\", \"vest\", \"vet\", \"vetch\", \"veto\", \"vex\", \"via\", \"vial\", \"vicar\", \"vice\", \"vichy\", \"vicky\", \"vida\", \"video\", \"vie\", \"viet\", \"view\", \"vigil\", \"vii\", \"viii\", \"vile\", \"villa\", \"vine\", \"vinyl\", \"viola\", \"violet\", \"virgil\", \"virgo\", \"virus\", \"vis\", \"visa\", \"vise\", \"visit\", \"visor\", \"vista\", \"vita\", \"vitae\", \"vital\", \"vito\", \"vitro\", \"viva\", \"vivian\", \"vivid\", \"vivo\", \"vixen\", \"viz\", \"vocal\", \"vogel\", \"vogue\", \"voice\", \"void\", \"volt\", \"volta\", \"volvo\", \"vomit\", \"von\", \"voss\", \"vote\", \"vouch\", \"vow\", \"vowel\", \"vulcan\", \"vvv\", \"vvvv\", \"vying\", \"waals\", \"wac\", \"wack\", \"wacke\", \"wacky\", \"waco\", \"wad\", \"wade\", \"wadi\", \"wafer\", \"wag\", \"wage\", \"waggle\", \"wah\", \"wahl\", \"wail\", \"waist\", \"wait\", \"waite\", \"waive\", \"wake\", \"waken\", \"waldo\", \"wale\", \"walk\", \"walkie\", \"wall\", \"walls\", \"wally\", \"walsh\", \"walt\", \"walton\", \"waltz\", \"wan\", \"wand\", \"wane\", \"wang\", \"want\", \"war\", \"ward\", \"ware\", \"warm\", \"warmth\", \"warn\", \"warp\", \"warren\", \"wart\", \"warty\", \"wary\", \"was\", \"wash\", \"washy\", \"wasp\", \"wast\", \"waste\", \"watch\", \"water\", \"watt\", \"watts\", \"wave\", \"wavy\", \"wax\", \"waxen\", \"waxy\", \"way\", \"wayne\", \"weak\", \"weal\", \"wealth\", \"wean\", \"wear\", \"weary\", \"weave\", \"web\", \"webb\", \"weber\", \"weco\", \"wed\", \"wedge\", \"wee\", \"weed\", \"weedy\", \"week\", \"weeks\", \"weep\", \"wehr\", \"wei\", \"weigh\", \"weir\", \"weird\", \"weiss\", \"welch\", \"weld\", \"well\", \"wells\", \"welsh\", \"welt\", \"wendy\", \"went\", \"wept\", \"were\", \"wert\", \"west\", \"wet\", \"whack\", \"whale\", \"wham\", \"wharf\", \"what\", \"wheat\", \"whee\", \"wheel\", \"whelk\", \"whelm\", \"whelp\", \"when\", \"where\", \"whet\", \"which\", \"whiff\", \"whig\", \"while\", \"whim\", \"whine\", \"whinny\", \"whip\", \"whir\", \"whirl\", \"whisk\", \"whit\", \"white\", \"whiz\", \"who\", \"whoa\", \"whole\", \"whom\", \"whoop\", \"whoosh\", \"whop\", \"whose\", \"whup\", \"why\", \"wick\", \"wide\", \"widen\", \"widow\", \"width\", \"wield\", \"wier\", \"wife\", \"wig\", \"wild\", \"wile\", \"wiley\", \"wilkes\", \"will\", \"willa\", \"wills\", \"wilma\", \"wilt\", \"wily\", \"win\", \"wince\", \"winch\", \"wind\", \"windy\", \"wine\", \"wing\", \"wink\", \"winnie\", \"wino\", \"winter\", \"winy\", \"wipe\", \"wire\", \"wiry\", \"wise\", \"wish\", \"wishy\", \"wisp\", \"wispy\", \"wit\", \"witch\", \"with\", \"withe\", \"withy\", \"witt\", \"witty\", \"wive\", \"woe\", \"wok\", \"woke\", \"wold\", \"wolf\", \"wolfe\", \"wolff\", \"wolve\", \"woman\", \"womb\", \"women\", \"won\", \"wonder\", \"wong\", \"wont\", \"woo\", \"wood\", \"woods\", \"woody\", \"wool\", \"woozy\", \"word\", \"wordy\", \"wore\", \"work\", \"world\", \"worm\", \"wormy\", \"worn\", \"worry\", \"worse\", \"worst\", \"worth\", \"wotan\", \"would\", \"wound\", \"wove\", \"woven\", \"wow\", \"wrack\", \"wrap\", \"wrath\", \"wreak\", \"wreck\", \"wrest\", \"wring\", \"wrist\", \"writ\", \"write\", \"writhe\", \"wrong\", \"wrote\", \"wry\", \"wuhan\", \"www\", \"wwww\", \"wxy\", \"wyatt\", \"wyeth\", \"wylie\", \"wyman\", \"wyner\", \"wynn\", \"xenon\", \"xerox\", \"xxx\", \"xxxx\", \"xylem\", \"xyz\", \"yacht\", \"yah\", \"yak\", \"yale\", \"yalta\", \"yam\", \"yamaha\", \"yang\", \"yank\", \"yap\", \"yaqui\", \"yard\", \"yarn\", \"yates\", \"yaw\", \"yawl\", \"yawn\", \"yea\", \"yeah\", \"year\", \"yearn\", \"yeast\", \"yeasty\", \"yeats\", \"yell\", \"yelp\", \"yemen\", \"yen\", \"yet\", \"yield\", \"yin\", \"yip\", \"ymca\", \"yodel\", \"yoder\", \"yoga\", \"yogi\", \"yoke\", \"yokel\", \"yolk\", \"yon\", \"yond\", \"yore\", \"york\", \"yost\", \"you\", \"young\", \"your\", \"youth\", \"yow\", \"yucca\", \"yuck\", \"yuh\", \"yuki\", \"yukon\", \"yule\", \"yves\", \"ywca\", \"yyy\", \"yyyy\", \"zag\", \"zaire\", \"zan\", \"zap\", \"zazen\", \"zeal\", \"zealot\", \"zebra\", \"zeiss\", \"zen\", \"zero\", \"zest\", \"zesty\", \"zeta\", \"zeus\", \"zig\", \"zilch\", \"zinc\", \"zing\", \"zion\", \"zip\", \"zloty\", \"zoe\", \"zomba\", \"zone\", \"zoo\", \"zoom\", \"zorn\", \"zurich\", \"zzz\", \"zzzz\"];\n\n// the below is heavily based on https://andrew.hedges.name/experiments/diceware/\n\n// from: https://www.rempe.us/diceware/\nfunction secureRandom(count) {\n  var cryptoObj = window.crypto || window.msCrypto\n  var rand = new Uint32Array(1)\n  var skip = 0x7fffffff - 0x7fffffff % count\n  var result\n\n  if (((count - 1) & count) === 0) {\n    cryptoObj.getRandomValues(rand)\n    return rand[0] & (count - 1)\n  }\n\n  do {\n    cryptoObj.getRandomValues(rand)\n    result = rand[0] & 0x7fffffff\n  } while (result >= skip)\n\n  return result % count\n}\n\n// based on: http://stackoverflow.com/a/1527820/11577\nfunction getRandomInt(min, max) {\n  if (window.crypto || window.msCrypto) {\n    return secureRandom(max) + min\n  } else {\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n}\n\nfunction getToken() {\n  var phrase = []\n\n  for (var i = 0; i < 3; i += 1) {\n    phrase.push(words[getRandomInt(0, words.length)]);\n  }\n\n  return phrase.join(' ')\n}\n\nexport default getToken;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport getToken from '../lib/tokenGenerator';\nimport * as ls from 'local-storage';\nimport {Button} from 'react-materialize'\n\nconst NewListButton = props => {\n    const onClick = event => {\n        const newToken = getToken();\n        ls.set('shoppingListToken', newToken);\n        props.setToken(newToken);\n    };\n    return (\n        <Link to=\"/ShoppingList\" onClick={onClick}>\n            <Button\n                node=\"button\"\n                className=\"NewList-button\"\n                waves=\"light\"\n            >\n                Create New List\n            </Button>\n        </Link>\n    );\n};\n\nexport default NewListButton;\n","import React from 'react';\nimport NewListButton from '../components/NewListButton';\nimport { Link, Redirect } from 'react-router-dom';\n\nfunction Home({ token, setToken }) {\n    return (\n        <section className=\"Home\">\n            <h1 className=\"Home-h1\">Never forget your groceries again.</h1>\n            <h2 className=\"Home-h2-1\">Grab a token by creating a new list.</h2>\n            <img src=\"/img/004-groceries-1.png\" alt=\"Shopping List Basket\"/>\n            <NewListButton\n                className=\"button\"\n                setToken={setToken}\n                token={token}\n            />\n            <p>\n                <h2 className=\"Home-h2\">\n                    or if you a token, you can {' '}\n                    <Link to=\"/JoinList\">join an existing list.</Link>\n                </h2>\n            </p>\n            {token ? <Redirect to=\"/ShoppingList\" /> : null}\n        </section>\n    );\n}\nexport default Home;\n","import React from 'react';\nimport {Button} from 'react-materialize'\n\nconst JoinList = ({ handleChange, checkToken, inputToken }) => {\n    return (\n        <div className=\"JoinList-container\">\n        <img src=\"/img/shopping-bag-1.png\" alt=\"Shopping List Basket\"/>\n            <div className=\"JoinList-text\">\n                Enter the token of an existing shopping list.\n            </div>\n            <div className='row'>\n                <div className='input-field col s12'>\n                <input\n                className=\"JoinList-input\"\n                type=\"text\"\n                name=\"inputToken\"\n                placeholder=\"Enter Token\"\n                onChange={handleChange}\n                required\n            />\n                </div>\n            </div>\n             <Button\n                node=\"button\"\n                className='btn-large'\n                onClick={() => checkToken(inputToken)}\n                waves=\"light\"\n            >\n                Join List{' '}\n            </Button>\n        </div>\n    );\n};\nexport default JoinList;\n","import React from 'react';\nimport '../App.css';\n\nconst Header = () => {\n    return (\n        <div className='Header'>\n            <a href=\"/\"><img src=\"/img/C4D8E2.png\" alt=\"Shopping List Logo\" /></a>\n        </div>\n    );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport FirebaseTesting from './pages/FirebaseTest';\nimport FooterTabs from './components/FooterTabs';\nimport ShoppingList from './pages/ShoppingList';\nimport AddItem from './pages/AddItem';\nimport fb from './lib/firebase';\nimport * as ls from 'local-storage';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './App.css';\nimport M from 'materialize-css'\nimport Home from './pages/Home';\nimport JoinList from './pages/JoinList';\nimport Header from './components/HeaderLogo';\n\nfunction App() {\n    const [token, setToken] = useState(ls.get('shoppingListToken'));\n    const [inputToken, setInputToken] = useState('');\n\n    const history = useHistory();\n\n    const handleChange = e => {\n        setInputToken(e.target.value);\n    };\n\n    const checkToken = e => {\n        let db = fb.firestore();\n        if (inputToken.length === 0) {\n            alert('You must enter a token value.  Try again! ');\n        } else {\n            db.collection(`${inputToken}`)\n                .get()\n                .then(data => {\n                    if (data.empty === true) {\n                        alert('Bad token, Try again or Create a New List');\n                    } else {\n                        ls.set('ShoppingListToken', inputToken);\n                        setToken(inputToken);\n                        history.push('/ShoppingList');\n                    }\n                });\n        }\n    };\n\n    /*Auto Init MaterializeCSS*/\n    useEffect(() => {\n        M.AutoInit()\n    }, [])\n\n    return ([\n        <>\n            <header>\n                <Header />\n            </header>\n            <main>\n            <Switch>\n                 <Route exact path=\"/\">\n                     <Home token={token} setToken={setToken} />\n                 </Route>\n                 <Route path=\"/ShoppingList\">\n                     <ShoppingList token={token} />\n                 </Route>\n                 <Route path=\"/AddItem\">\n                     <AddItem token={token} />\n                 </Route>\n                 <Route path=\"/FirebaseTesting\">\n                     <FirebaseTesting />\n                 </Route>\n                 <Route path=\"/JoinList\">\n                     <JoinList\n                        handleChange={handleChange}\n                        checkToken={checkToken}\n                        inputToken={inputToken}\n                    />\n                </Route>\n            </Switch>\n            </main>\n            <footer>\n                {token ? <FooterTabs /> : ' '}\n            </footer>\n            </>\n    ]\n    );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); "],"sourceRoot":""}